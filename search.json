[{"path":"https://ashbythorpe.github.io/nestedmodels/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 nestedmodels authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"what-is-the-alternative","dir":"Articles","previous_headings":"","what":"What is the alternative?","title":"nestedmodels-limitations","text":"datasets, issues problematic ignore. cases, alternative approach obvious: just use non-nested model. ‘recipes’ package many methods dealing categorical data, models likely give promising results. However, models, notably forecasting algorithms, nestedmodels can seem like solution forecasting panel data. specific case, global forecasting method recommended (e.g. ‘Prophet’ gradient boosting model), since models can deal categorical data. general, better find model suit needs, rather sticking ","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"nestedmodels-limitations","text":"vignette, discussed conditions reasons nested modelling best approach every situation, respond case.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"what-is-nestedmodels","dir":"Articles","previous_headings":"","what":"What is nestedmodels?","title":"nestedmodels","text":"nestedmodels extension ‘tidymodels’ framework. allows models workflows used nested data. provides alternative ‘modeltime’’s approach nested modelling ‘multilevelmod’ package, allowing model workflow used nested data easily.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"why-do-i-need-nestedmodels","dir":"Articles","previous_headings":"","what":"Why do I need nestedmodels?","title":"nestedmodels","text":"best example may need use nestedmodels package working panel data. set time series, describing different object (historic prices set stocks, example), may want model time series separately, especially considering fact many time series modelling tools work well non-date predictors (furthermore, many models accept non-numeric predictors, although often better ways deal problem; see recipes::step_dummy()). scenario, nested modelling often best solution.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"how-does-nestedmodels-work","dir":"Articles","previous_headings":"","what":"How does nestedmodels work?","title":"nestedmodels","text":"implementation nestedmodels simple. Fitting nested model fits model nested value (time series set stocks, model fitted stock). correct model selected used making predictions.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"a-quick-example","dir":"Articles","previous_headings":"","what":"A quick example","title":"nestedmodels","text":"vignette, ’re going explore basic example nested model. ’re going need following packages: ’re going use example data included ‘nestedmodels’ package. data simple, serves example data can nested, rather representing anything concrete. data can nested following way: Lets split data training testing set using nested_resamples() function. ensures training testing set contain data every ‘id’ value. Now let’s define model: Since ’re fitting model nested data, need way make model ‘nested’. simple nested() function. can fit model usual way. Note data must nested, formula include id column. Predicting can also done usual way (data predict can nested non-nested). Since just demonstration, use data model fitted . method fine, nest data pain. can solve using workflow. first define recipe, define step used nest data. time, formula can include ‘id’ column, since recipe needs act . little easier nesting data manually. Note recipe actually nest data, instead removes specified columns adds new column, ‘nest_id’, specifies nest row belongs . Now create workflow, combining recipe model. workflow can fitted way model, note since used step_nest() data nested. fit object can used make predictions. common parsnip functions can also used fitted nested models: really need know use nestedmodels package. models workflows can compared, fitted tuned much way normal models workflows - can even combine normal models using ‘workflowsets’ ‘stacks’ packages.","code":"data(\"example_nested_data\") data <- example_nested_data data #> # A tibble: 1,000 × 7 #>       id   id2     x     y     z     a     b #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  239. 36.0   44.7 50.0  #>  2     1     1    50  313. 38.7   40.2 64.9  #>  3     1     1    51 -109. 23.4   43.2 38.0  #>  4     1     1    52  189. 34.2   66.4 61.7  #>  5     1     1    53 -491.  9.51  18.2 -1.66 #>  6     1     1    54  339. 39.7   83.8 38.8  #>  7     1     1    55 -486.  9.72  91.7 40.7  #>  8     1     1    56 -284. 17.0   79.8 55.4  #>  9     1     1    57  416. 42.5   50.3 33.8  #> 10     1     1    58  122. 31.8   25.4 20.5  #> # … with 990 more rows nested_data <- nest(data, data = -id) nested_data #> # A tibble: 20 × 2 #>       id data              #>    <int> <list>            #>  1     1 <tibble [50 × 6]> #>  2     2 <tibble [50 × 6]> #>  3     3 <tibble [50 × 6]> #>  4     4 <tibble [50 × 6]> #>  5     5 <tibble [50 × 6]> #>  6     6 <tibble [50 × 6]> #>  7     7 <tibble [50 × 6]> #>  8     8 <tibble [50 × 6]> #>  9     9 <tibble [50 × 6]> #> 10    10 <tibble [50 × 6]> #> 11    11 <tibble [50 × 6]> #> 12    12 <tibble [50 × 6]> #> 13    13 <tibble [50 × 6]> #> 14    14 <tibble [50 × 6]> #> 15    15 <tibble [50 × 6]> #> 16    16 <tibble [50 × 6]> #> 17    17 <tibble [50 × 6]> #> 18    18 <tibble [50 × 6]> #> 19    19 <tibble [50 × 6]> #> 20    20 <tibble [50 × 6]> split <- nested_resamples(nested_data, rsample::initial_split()) data_tr <- rsample::training(split) data_tst <- rsample::testing(split) model <- linear_reg(penalty = 0.1) %>%   set_engine(\"glmnet\") nested_model <- model %>%   nested() nested_model #> Nested Model Specification #>  #> Inner model: #> Linear Regression Model Specification (regression) #>  #> Main Arguments: #>   penalty = 0.1 #>  #> Computational engine: glmnet nested_tr <- tidyr::nest(data_tr, data = -id) model_fit <- fit(nested_model, z ~ x + y + a + b, nested_tr) model_fit #> Nested model fit, with 20 inner models #> # A tibble: 20 × 2 #>       id .model_fit #>    <int> <list>     #>  1     1 <fit[+]>   #>  2     2 <fit[+]>   #>  3     3 <fit[+]>   #>  4     4 <fit[+]>   #>  5     5 <fit[+]>   #>  6     6 <fit[+]>   #>  7     7 <fit[+]>   #>  8     8 <fit[+]>   #>  9     9 <fit[+]>   #> 10    10 <fit[+]>   #> 11    11 <fit[+]>   #> 12    12 <fit[+]>   #> 13    13 <fit[+]>   #> 14    14 <fit[+]>   #> 15    15 <fit[+]>   #> 16    16 <fit[+]>   #> 17    17 <fit[+]>   #> 18    18 <fit[+]>   #> 19    19 <fit[+]>   #> 20    20 <fit[+]> predict(model_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  39.8 #>  2  15.6 #>  3  58.5 #>  4  57.9 #>  5  33.9 #>  6  16.7 #>  7  24.8 #>  8  50.9 #>  9  12.9 #> 10  38.9 #> # … with 250 more rows recipe <- recipe(data_tr, z ~ x + y + a + b + id) %>%   step_nest(id) recipe %>%   prep() %>%   bake(NULL) #> # A tibble: 740 × 6 #>        x      y     a     b     z nest_id #>    <int>  <dbl> <dbl> <dbl> <dbl> <fct>   #>  1    50  313.  40.2  64.9  38.7  Nest 1  #>  2    59 -109.  66.7  54.5  23.4  Nest 1  #>  3    87  232.  48.8  54.7  62.0  Nest 1  #>  4    93 -258.  95.1  90.5  -7.48 Nest 1  #>  5    85 -192.  52.4  43.3  46.6  Nest 1  #>  6    73 -436.  31.3   5.80 20.2  Nest 1  #>  7    71  -78.5 65.2  25.9  33.2  Nest 1  #>  8    81  293.   2.82 58.2  64.2  Nest 1  #>  9    54  339.  83.8  38.8  39.7  Nest 1  #> 10    67  490.  40.2  92.1  37.3  Nest 1  #> # … with 730 more rows wf <- workflow() %>%   add_model(nested_model) %>%   add_recipe(recipe) wf_fit <- fit(wf, data_tr) predict(wf_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  39.8 #>  2  15.6 #>  3  58.5 #>  4  57.9 #>  5  33.9 #>  6  16.7 #>  7  24.8 #>  8  50.9 #>  9  12.9 #> 10  38.9 #> # … with 250 more rows augment(wf_fit, data_tst) #> # A tibble: 260 × 8 #>       id   id2     x     y     z     a     b .pred #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    52  189.  34.2 66.4   61.7  39.8 #>  2     1     1    56 -284.  17.0 79.8   55.4  15.6 #>  3     1     1    62  488.  37.2  5.23  19.8  58.5 #>  4     1     1    64  474.  36.7 80.6   49.1  57.9 #>  5     1     1    66  158.  25.3 30.4   60.6  33.9 #>  6     1     1    69 -146.  30.7 84.9   83.8  16.7 #>  7     1     1    70 -131.  31.2  3.10  12.6  24.8 #>  8     1     1    72  309.  47.2 59.7   26.0  50.9 #>  9     1     2    77 -210.  45.9 13.8   51.9  12.9 #> 10     1     2    79  207.  61.1 57.7   53.9  38.9 #> # … with 250 more rows tidy(wf_fit) #> # A tibble: 100 × 4 #>    nest_id term        estimate penalty #>    <fct>   <chr>          <dbl>   <dbl> #>  1 Nest 1  (Intercept)  41.3        0.1 #>  2 Nest 1  x            -0.101      0.1 #>  3 Nest 1  y             0.0553     0.1 #>  4 Nest 1  a             0.0815     0.1 #>  5 Nest 1  b            -0.197      0.1 #>  6 Nest 2  (Intercept) -97.6        0.1 #>  7 Nest 2  x             0.708      0.1 #>  8 Nest 2  y             0.0310     0.1 #>  9 Nest 2  a            -0.0432     0.1 #> 10 Nest 2  b             0.106      0.1 #> # … with 90 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"nestedmodels","text":"short vignette, simple example nested model workflow created used dummy data, demonstrate nestedmodels used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ashby Thorpe. Author, maintainer.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorpe (2022). nestedmodels: Tidymodels Nested/Panel Data. https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/.","code":"@Manual{,   title = {nestedmodels: Tidymodels for Nested/Panel Data},   author = {Ashby Thorpe},   year = {2022},   note = {https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/}, }"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"nestedmodels","dir":"","previous_headings":"","what":"Tidymodels for Nested/Panel Data","title":"Tidymodels for Nested/Panel Data","text":"goal nestedmodels allow modelling nested data. models accept certain predictors. panel data, often desirable create model panel. nestedmodels enhances ‘tidymodels’ set packages allowing user classify model ‘nested’.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidymodels for Nested/Panel Data","text":"can install development version nestedmodels like :","code":"# install.packages(\"devtools\") devtools::install_github(\"ashbythorpe/nestedmodels\")"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tidymodels for Nested/Panel Data","text":"basic example shows solve common problem:","code":"library(nestedmodels)  data(\"example_nested_data\")  nested_data <- tidyr::nest(example_nested_data, data = -id)  split <- nested_resamples(nested_data, rsample::initial_split())  data_tr <- rsample::training(split) data_tst <- rsample::testing(split)  model <- parsnip::linear_reg() %>%   nested()  fit <- fit(model, z ~ x + y + a + b,             tidyr::nest(data_tr, data = -id))  predict(fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  42.5 #>  2  51.8 #>  3  53.5 #>  4  30.5 #>  5  18.6 #>  6  45.0 #>  7  19.1 #>  8  38.6 #>  9  48.7 #> 10  17.2 #> # … with 250 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with predictions — augment.nested_model_fit","title":"Augment data with predictions — augment.nested_model_fit","text":"generics::augment() method nested models. augment() add column(s) predictions given data.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"# S3 method for nested_model_fit augment(x, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with predictions — augment.nested_model_fit","text":"x nested_model_fit object produced fit.nested_model(). new_data data frame - can nested non-nested. ... Passed onto parsnip::augment.model_fit().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with predictions — augment.nested_model_fit","text":"data frame one added columns predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -c(id, id2))  fitted <- fit(model, z ~ x + y + a + b, nested_data)  augment(fitted, example_nested_data) #> # A tibble: 1,000 × 7 #>        x     y     z     a     b .pred .resid #>    <int> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #>  1    49  239. 36.0   44.7 50.0   31.4  4.55  #>  2    50  313. 38.7   40.2 64.9   32.5  6.22  #>  3    51 -109. 23.4   43.2 38.0   21.7  1.64  #>  4    52  189. 34.2   66.4 61.7   30.6  3.56  #>  5    53 -491.  9.51  18.2 -1.66  12.0 -2.45  #>  6    54  339. 39.7   83.8 38.8   38.6  1.02  #>  7    55 -486.  9.72  91.7 40.7   13.0 -3.29  #>  8    56 -284. 17.0   79.8 55.4   17.7 -0.651 #>  9    57  416. 42.5   50.3 33.8   40.2  2.25  #> 10    58  122. 31.8   25.4 20.5   30.8  0.954 #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example nested data — example_nested_data","title":"Example nested data — example_nested_data","text":"dataset containing example data can nested. Mainly used examples testing.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example nested data — example_nested_data","text":"","code":"example_nested_data"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example nested data — example_nested_data","text":"tibble 1000 rows 7 variables id column can nested, ranging 1 20. id2 Another column can nested, ranging 1 30. x numeric column depends 'id'. y sequential numeric column (added randomness), independent columns. z column dependent id, id2, x y. randomly generated numeric column, ranging 1 100. b randomly generated numeric column, centred around 50.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example nested data — example_nested_data","text":"","code":"example_nested_data #> # A tibble: 1,000 × 7 #>       id   id2     x     y     z     a     b #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  239. 36.0   44.7 50.0  #>  2     1     1    50  313. 38.7   40.2 64.9  #>  3     1     1    51 -109. 23.4   43.2 38.0  #>  4     1     1    52  189. 34.2   66.4 61.7  #>  5     1     1    53 -491.  9.51  18.2 -1.66 #>  6     1     1    54  339. 39.7   83.8 38.8  #>  7     1     1    55 -486.  9.72  91.7 40.7  #>  8     1     1    56 -284. 17.0   79.8 55.4  #>  9     1     1    57  416. 42.5   50.3 33.8  #> 10     1     1    58  122. 31.8   25.4 20.5  #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the inner model of a nested model object — extract_inner_model","title":"Get the inner model of a nested model object — extract_inner_model","text":"Extract inner model nested_model object, workflow containing nested model.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the inner model of a nested model object — extract_inner_model","text":"","code":"extract_inner_model(x, ...)  # S3 method for default extract_inner_model(x, ...)  # S3 method for nested_model extract_inner_model(x, ...)  # S3 method for workflow extract_inner_model(x, ...)  # S3 method for model_spec extract_inner_model(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the inner model of a nested model object — extract_inner_model","text":"x model spec workflow. ... used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the inner model of a nested model object — extract_inner_model","text":"model_spec object","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the inner model of a nested model object — extract_inner_model","text":"","code":"model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  extract_inner_model(model) #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nested model to a dataset — fit.nested_model","title":"Fit a nested model to a dataset — fit.nested_model","text":"generics::fit() method nested models.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nested model to a dataset — fit.nested_model","text":"","code":"# S3 method for nested_model fit(   object,   formula,   data,   case_weights = NULL,   control = parsnip::control_parsnip(),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nested model to a dataset — fit.nested_model","text":"object object class nested_model. formula object class formula. Passed parsnip::fit.model_spec(). contain variable nest . data data frame. used 'nested_model' object, data frame must already nested. case_weights optional vector case weights. Passed parsnip::fit.model_spec(). control parsnip::control_parsnip() object. Passed parsnip::fit.model_spec(). ... Passed parsnip::fit.model_spec(). Currently unused.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a nested model to a dataset — fit.nested_model","text":"nested_model_fit object several elements: spec: model specification object (inner model nested model object) fit: tibble containing model fits nests correspond . inner_names: character vector names, used help nesting data predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a nested model to a dataset — fit.nested_model","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -id)  fit(model, z ~ x + y + a + b, nested_data) #> Nested model fit, with 20 inner models #> # A tibble: 20 × 2 #>       id .model_fit #>    <int> <list>     #>  1     1 <fit[+]>   #>  2     2 <fit[+]>   #>  3     3 <fit[+]>   #>  4     4 <fit[+]>   #>  5     5 <fit[+]>   #>  6     6 <fit[+]>   #>  7     7 <fit[+]>   #>  8     8 <fit[+]>   #>  9     9 <fit[+]>   #> 10    10 <fit[+]>   #> 11    11 <fit[+]>   #> 12    12 <fit[+]>   #> 13    13 <fit[+]>   #> 14    14 <fit[+]>   #> 15    15 <fit[+]>   #> 16    16 <fit[+]>   #> 17    17 <fit[+]>   #> 18    18 <fit[+]>   #> 19    19 <fit[+]>   #> 20    20 <fit[+]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"generics::fit_xy() method nested models. called directly instead called workflows::fit.workflow().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"","code":"# S3 method for nested_model fit_xy(   object,   x,   y,   case_weights = NULL,   control = parsnip::control_parsnip(),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"object object class nested_model. x data frame predictors. y data frame outcome data. case_weights optional vector case weights. Passed parsnip::fit.model_spec(). control parsnip::control_parsnip() object. Passed parsnip::fit.model_spec(). ... Passed parsnip::fit.model_spec(). Currently unused.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"nested_model_fit object several elements: spec: model specification object (inner model nested model object) fit: tibble containing model fits nests correspond . inner_names: character vector names, used help nesting data predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  recipe <- recipes::recipe(example_nested_data, z ~ x + y + id) %>%   step_nest(id)  wf <- workflows::workflow() %>%   workflows::add_recipe(recipe) %>%   workflows::add_model(model)  fit(wf, example_nested_data) #> ══ Workflow [trained] ══════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: nested_model() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 1 Recipe Step #>  #> • step_nest() #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> # A tibble: 20 × 2 #>    nest_id .model_fit #>    <fct>   <list>     #>  1 Nest 1  <fit[+]>   #>  2 Nest 2  <fit[+]>   #>  3 Nest 3  <fit[+]>   #>  4 Nest 4  <fit[+]>   #>  5 Nest 5  <fit[+]>   #>  6 Nest 6  <fit[+]>   #>  7 Nest 7  <fit[+]>   #>  8 Nest 8  <fit[+]>   #>  9 Nest 9  <fit[+]>   #> 10 Nest 10 <fit[+]>   #> 11 Nest 11 <fit[+]>   #> 12 Nest 12 <fit[+]>   #> 13 Nest 13 <fit[+]>   #> 14 Nest 14 <fit[+]>   #> 15 Nest 15 <fit[+]>   #> 16 Nest 16 <fit[+]>   #> 17 Nest 17 <fit[+]>   #> 18 Nest 18 <fit[+]>   #> 19 Nest 19 <fit[+]>   #> 20 Nest 20 <fit[+]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"parsnip::multi_predict() methods nested models. Allows predictions made sub-models model object.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"","code":"# S3 method for nested_model_fit multi_predict(object, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"object nested_model_fit object produced fit.nested_model(). new_data data frame - can nested non-nested. ... Passed onto parsnip::multi_predict()","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"tibble number rows new_data, unnested.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg(penalty = 1) %>%   parsnip::set_engine(\"glmnet\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -id2)  fitted <- fit(model, z ~ x + y + a + b, nested_data)  parsnip::multi_predict(fitted, example_nested_data, penalty = c(0.1, 0.2, 0.3)) #> # A tibble: 1,000 × 1 #>    .pred            #>    <list>           #>  1 <tibble [3 × 2]> #>  2 <tibble [3 × 2]> #>  3 <tibble [3 × 2]> #>  4 <tibble [3 × 2]> #>  5 <tibble [3 × 2]> #>  6 <tibble [3 × 2]> #>  7 <tibble [3 × 2]> #>  8 <tibble [3 × 2]> #>  9 <tibble [3 × 2]> #> 10 <tibble [3 × 2]> #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Nested Model — nested","title":"Create a Nested Model — nested","text":"nested turns model workflow nested model/workflow. is_nested checks model workflow nested.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Nested Model — nested","text":"","code":"nested(x, ...)  # S3 method for default nested(x, ...)  # S3 method for model_spec nested(x, ...)  # S3 method for nested_model nested(x, ...)  # S3 method for workflow nested(x, ...)  is_nested(x, ...)  # S3 method for default is_nested(x, ...)  # S3 method for model_spec is_nested(x, ...)  # S3 method for workflow is_nested(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Nested Model — nested","text":"x model specification workflow. ... currently used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Nested Model — nested","text":"nested model object, workflow containing nested model. is_nested, logical vector length 1.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Nested Model — nested","text":"","code":"model <-   parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  model #> Nested Model Specification #>  #> Inner model: #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>   is_nested(model) #> [1] TRUE  wf <- workflows::workflow() %>%   workflows::add_model(model)  is_nested(wf) #> [1] TRUE"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Create splits with nested data — nested_resamples","title":"Create splits with nested data — nested_resamples","text":"Use 'rsample' split function nested data, nests act strata. almost guarantees every split contain data every nest.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create splits with nested data — nested_resamples","text":"","code":"nested_resamples(   data,   resamples,   nesting_method = NULL,   size_action = c(\"truncate\", \"recycle\", \"recycle-random\", \"combine\", \"combine-random\",     \"combine-end\", \"error\"),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create splits with nested data — nested_resamples","text":"data data frame. resamples expression, function, formula string can evaluated produce rset rsplit object. nesting_method recipe, workflow NULL, used nest data data already nested (see Details). size_action different numbers splits produced nest, sizes matched (see Details)? ... Extra arguments pass resamples.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create splits with nested data — nested_resamples","text":"Either rsplit object rset object, depending resamples.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create splits with nested data — nested_resamples","text":"function breaks data frame smaller, nested data frames. Resampling performed within nests, results combined together end. ensures split contains data every nest. However, function perform pooling (unlike rsample::make_strata()), may run issues nest small.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"nesting-data","dir":"Reference","previous_headings":"","what":"Nesting Data","title":"Create splits with nested data — nested_resamples","text":"data can nested several ways: nesting_method NULL data grouped (using dplyr::group_by()), data nested (see tidyr::nest()) works). data grouped, assumed already nested, nested_resamples try find column contains nested data frames. nesting_method workflow recipe, recipe step created using  step_nest(), data nested using step recipe. convenient already created recipe workflow, saves line code.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"resample-evaluation","dir":"Reference","previous_headings":"","what":"Resample Evaluation","title":"Create splits with nested data — nested_resamples","text":"resamples argument can take many forms: function call, vfold_cv(v = 5). similar format rsample::nested_cv(). function, rsample::vfold_cv. purrr-style anonymous function, converted function using rlang::as_function(). string, evaluated using rlang::exec(). Every method evaluated data passed first argument function (name 'data').","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"size-matching","dir":"Reference","previous_headings":"","what":"Size Matching","title":"Create splits with nested data — nested_resamples","text":"set resamples created nest can combined, must contain number splits. resampling methods, issue. rsample::vfold_cv(), example, reliably creates number splits defined v argument. However, resampling methods, like rsample::rolling_origin(), depend size data argument, therefore may produce different numbers resamples presented differently sized nests. size_action argument defines many ways matching sizes rsets different numbers splits. methods either try reduce number splits set set length set lowest number splits; opposite, set number splits largest set. \"truncate\", default, means splits beyond required length removed. \"recycle\" means sets splits extended repeating elements required length reached, mimicking process vector recycling. advantage method created splits preserved. \"recycle-random\" similar process recycling, splits copied random spaces output, may important order resamples matters. process completely random, program makes sure every split copied roughly number times. \"combine\" gets rid excess splits combining previous ones. means training testing rows merged one split. Combining done systematically: set splits needs compacted set 5, first split combined sixth split, eleventh, sixteenth, etc. approach recommended, since clear benefit combined split . \"combine-random\" combines split random set splits, instead systematic process described previous method. , process actually random, split combined roughly number splits. \"combine-end\" combines every excess split last non-excess split. \"error\" throws error nest produce number splits.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create splits with nested data — nested_resamples","text":"","code":"nested_data <- example_nested_data %>%   tidyr::nest(data = -id)  grouped_data <- example_nested_data %>%   dplyr::group_by(id)  recipe <- recipes::recipe(example_nested_data, z ~ .) %>%   step_nest(id)  wf <- workflows::workflow() %>%   workflows::add_recipe(recipe)  nested_resamples(nested_data, rsample::vfold_cv()) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits            id     #>    <list>            <chr>  #>  1 <split [900/100]> Fold01 #>  2 <split [900/100]> Fold02 #>  3 <split [900/100]> Fold03 #>  4 <split [900/100]> Fold04 #>  5 <split [900/100]> Fold05 #>  6 <split [900/100]> Fold06 #>  7 <split [900/100]> Fold07 #>  8 <split [900/100]> Fold08 #>  9 <split [900/100]> Fold09 #> 10 <split [900/100]> Fold10  nested_resamples(   dplyr::group_by(example_nested_data, id),   ~ rsample::initial_split(.) ) #> <Training/Testing/Total> #> <740/260/1000>  nested_resamples(example_nested_data, ~ {   rsample::validation_split(.) }, nesting_method = recipe) #> # Validation Set Split (0.75/0.25)   #> # A tibble: 1 × 2 #>   splits            id         #>   <list>            <chr>      #> 1 <split [740/260]> validation  nested_resamples(example_nested_data, rsample::bootstraps,   times = 25, nesting_method = wf ) #> # Bootstrap sampling  #> # A tibble: 25 × 2 #>    splits             id          #>    <list>             <chr>       #>  1 <split [1000/376]> Bootstrap01 #>  2 <split [1000/355]> Bootstrap02 #>  3 <split [1000/356]> Bootstrap03 #>  4 <split [1000/366]> Bootstrap04 #>  5 <split [1000/360]> Bootstrap05 #>  6 <split [1000/370]> Bootstrap06 #>  7 <split [1000/354]> Bootstrap07 #>  8 <split [1000/360]> Bootstrap08 #>  9 <split [1000/357]> Bootstrap09 #> 10 <split [1000/376]> Bootstrap10 #> # … with 15 more rows  # nested nested resamples  nested_resamples(nested_data, rsample::nested_cv(   rsample::vfold_cv(),   rsample::bootstraps() )) #> # Nested resampling: #> #  outer: 10-fold cross-validation #> #  inner: Bootstrap sampling #> # A tibble: 10 × 3 #>    splits            id     inner_resamples       #>    <list>            <chr>  <list>                #>  1 <split [900/100]> Fold01 <bootstraps [25 × 2]> #>  2 <split [900/100]> Fold02 <bootstraps [25 × 2]> #>  3 <split [900/100]> Fold03 <bootstraps [25 × 2]> #>  4 <split [900/100]> Fold04 <bootstraps [25 × 2]> #>  5 <split [900/100]> Fold05 <bootstraps [25 × 2]> #>  6 <split [900/100]> Fold06 <bootstraps [25 × 2]> #>  7 <split [900/100]> Fold07 <bootstraps [25 × 2]> #>  8 <split [900/100]> Fold08 <bootstraps [25 × 2]> #>  9 <split [900/100]> Fold09 <bootstraps [25 × 2]> #> 10 <split [900/100]> Fold10 <bootstraps [25 × 2]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nestedmodels-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nestedmodels: Tidymodels for Nested/Panel Data — nestedmodels-package","title":"nestedmodels: Tidymodels for Nested/Panel Data — nestedmodels-package","text":"goal 'nestedmodels' allow modelling nested data. models accept certain predictors. panel data, often desirable create model panel. 'nestedmodels' enhances 'tidymodels' set packages allowing user classify model workflow 'nested'.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nestedmodels-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nestedmodels: Tidymodels for Nested/Panel Data — nestedmodels-package","text":"Maintainer: Ashby Thorpe ashbythorpe@gmail.com (ORCID)","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested Model Predictions — predict.nested_model_fit","title":"Nested Model Predictions — predict.nested_model_fit","text":"Apply fitted nested models generate different types predictions. stats::predict() methods nested model fits.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested Model Predictions — predict.nested_model_fit","text":"","code":"# S3 method for nested_model_fit predict(object, new_data, type = NULL, opts = list(), ...)  # S3 method for nested_model_fit predict_raw(object, new_data, opts = list(), ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested Model Predictions — predict.nested_model_fit","text":"object nested_model_fit object produced fit.nested_model(). new_data data frame make predictions . Can nested non-nested. type singular character vector NULL. Passed parsnip::predict.model_fit(). opts list optional arguments. Passed parsnip::predict.model_fit(). ... Arguments underlying model's predict function. Passed parsnip::predict.model_fit().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested Model Predictions — predict.nested_model_fit","text":"data frame model predictions. predict_raw(), matrix, data frame, vector list.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested Model Predictions — predict.nested_model_fit","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -id)  fitted <- fit(model, z ~ x + y + a + b, nested_data)  predict(fitted, example_nested_data) #> # A tibble: 1,000 × 1 #>    .pred #>    <dbl> #>  1 42.0  #>  2 42.8  #>  3 26.4  #>  4 38.6  #>  5 12.4  #>  6 51.0  #>  7  9.84 #>  8 16.6  #>  9 53.4  #> 10 39.3  #> # … with 990 more rows  parsnip::predict_raw(fitted, example_nested_data) #>            1            2            3            4            5            6  #>  41.97146258  42.77131775  26.40976466  38.62810089  12.40196915  51.00383941  #>            7            8            9           10           11           12  #>   9.84403832  16.57512885  53.37518231  39.33278428  24.42744577  28.91439771  #>           13           14           15           16           17           18  #>  15.45738598  56.20882863  27.04747056  55.04466974  45.50046358  33.99221245  #>           19           20           21           22           23           24  #>  45.72129793  32.04590447  18.00106076  25.76159968  29.94605097  48.88063591  #>           25           26           27           28           29           30  #>  13.23771319  44.11913015  49.34294943  10.21302913  15.24358678  30.89762703  #>           31           32           33           34           35           36  #>  38.34168072  49.30079970  38.30642601  29.41056041  56.61893911  12.46855129  #>           37           38           39           40           41           42  #>  19.46214935  55.53694334  38.33830950  16.06075278   1.21432704  11.02385672  #>           43           44           45           46           47           48  #>  12.26151591  21.58500554  10.15416808  38.10490431   7.43469269  27.30689551  #>           49           50            1            2            3            4  #>  27.77587488   6.19214352  -0.98590810  -9.83314765  -5.65686169   6.90385025  #>            5            6            7            8            9           10  #>  15.39013583   6.55539252   1.41396764  -5.26750887  -6.88406648   0.34145175  #>           11           12           13           14           15           16  #>  11.80590230  -6.65880888  -0.35799031  20.94835641  23.95864255  19.83658672  #>           17           18           19           20           21           22  #>   4.28236166   8.40975080  17.25716306  12.21072595  17.68426698  11.06067296  #>           23           24           25           26           27           28  #>   4.16972200  15.42778335  32.27393956  25.47952387  24.94505585  25.58992392  #>           29           30           31           32           33           34  #>  21.32576597   9.08460838  25.60669507  28.75716766  27.07720792  21.81038811  #>           35           36           37           38           39           40  #>  25.07491973  31.15466232  10.15838837  20.11709416  27.78727344  39.71334729  #>           41           42           43           44           45           46  #>  20.89914099  31.11169406  34.71161847  38.92636021  35.56374967  28.53774651  #>           47           48           49           50            1            2  #>  44.75725708  46.87256650  28.46398104  41.88991636  36.43694585  30.05410616  #>            3            4            5            6            7            8  #>  29.28198295  35.45483447  33.98494484  24.43322771  33.19090956  11.76901149  #>            9           10           11           12           13           14  #>  30.01754431  25.23035287  11.34934910   7.36713871  19.02780597  28.86594181  #>           15           16           17           18           19           20  #>  24.59200100  28.99119228   6.65405075  30.30368071  12.28353866   5.97893691  #>           21           22           23           24           25           26  #>  23.12721710   9.03463514  24.32186286  13.55880596  21.23008147  23.96511799  #>           27           28           29           30           31           32  #>   4.94116156   0.41143411   4.67025211  18.33038090  24.71979106  13.27452991  #>           33           34           35           36           37           38  #>  13.84639103   2.86757010  12.98507763  -0.09713434   7.65895141   1.76914148  #>           39           40           41           42           43           44  #>  -2.22042040  -0.14167645  13.69685985   4.20183475   4.21747167   6.96313765  #>           45           46           47           48           49           50  #>   3.54733788  -4.24984123  14.75270208   4.83834425  14.31089400  12.59751320  #>            1            2            3            4            5            6  #>  18.08900572  15.05577575   3.06624545   1.11602588  13.97757700  11.86950585  #>            7            8            9           10           11           12  #>  17.83533071  16.76291021  -1.75352199   1.03379696   0.91527111  19.54916079  #>           13           14           15           16           17           18  #>  -1.98729354  -3.24792679  -4.84017646  -5.10396084  11.56417818  -3.63160727  #>           19           20           21           22           23           24  #>  13.83316128   9.27287956  23.33470705   9.96112009  16.25480978   8.31457401  #>           25           26           27           28           29           30  #>  -6.23409971   2.82749343  19.44244899   8.12298587  -0.07124732   0.12936078  #>           31           32           33           34           35           36  #>   6.31656283  12.36935758   2.37986768  -6.06229586   4.38579373  16.74432844  #>           37           38           39           40           41           42  #>  10.01692193   0.82446941   8.11631974  20.12483629   9.28586641  -4.42028965  #>           43           44           45           46           47           48  #>   6.85468381  18.90527357  -1.31605383  12.90781493  -0.47172824   1.46283505  #>           49           50            1            2            3            4  #>  -5.13703951   2.91441632  33.30657731  24.76203734  43.26245811  18.92621834  #>            5            6            7            8            9           10  #>  60.26475861  56.02688417  31.12533968  53.13484873  37.23346545  44.92412776  #>           11           12           13           14           15           16  #>  28.09523954  47.20291264  28.73337405  38.39506855  45.87885969  47.87541329  #>           17           18           19           20           21           22  #>  30.65151948  21.98903902  48.50469625  56.32064213  27.27957815  32.56863518  #>           23           24           25           26           27           28  #>  34.01916781  33.64724117  18.16199910  53.84427289  18.99590879  46.16683088  #>           29           30           31           32           33           34  #>  48.41482256  40.33439380  40.26586087  33.92639110  26.30055306  49.56645005  #>           35           36           37           38           39           40  #>  37.51108000  33.41330716  52.23892536  38.56345383  48.12527887  64.60358964  #>           41           42           43           44           45           46  #>  33.16975940  49.79992659  47.00253622  21.48241733  56.36418117  39.47745394  #>           47           48           49           50            1            2  #>  36.73607357  38.89197570  37.00183857  37.60316913  59.02952502  44.89948285  #>            3            4            5            6            7            8  #>  50.65197508  76.77552242  55.06322409  48.61887449  57.75243060  43.17011413  #>            9           10           11           12           13           14  #>  52.37497840  41.54811174  70.47751992  65.09182052  47.46683451  51.72576623  #>           15           16           17           18           19           20  #>  49.06635454  38.19100777  60.63362312  55.92607706  39.19837890  34.94999245  #>           21           22           23           24           25           26  #>  50.77864407  48.28064638  34.56953727  42.50380689  61.53769945  62.83191784  #>           27           28           29           30           31           32  #>  43.73898025  33.35020339  39.94920541  38.72060049  31.48159880  61.69174824  #>           33           34           35           36           37           38  #>  42.96197929  27.97960509  31.42411751  56.41907979  33.10084868  47.38476170  #>           39           40           41           42           43           44  #>  52.63337648  57.49204162  35.74334166  33.71026252  26.44105358  29.14784899  #>           45           46           47           48           49           50  #>  39.06716825  52.07537713  29.39903884  46.26371021  41.37155791  43.34263480  #>            1            2            3            4            5            6  #>  59.94403067  30.52193220  29.07285982  42.67786370  45.09266904  42.10699333  #>            7            8            9           10           11           12  #>  40.06697656  32.83973457  50.80625254  34.10494825  34.65451807  23.47317429  #>           13           14           15           16           17           18  #>  48.65346356  29.65387858  23.61090513  17.97715454  50.35373247  28.86132612  #>           19           20           21           22           23           24  #>  43.28033096  43.24377429  26.27475066  32.34922399  16.62602733  17.56431681  #>           25           26           27           28           29           30  #>  36.26816490  26.27528929  33.76079979  39.60930522  24.52916184  21.85666960  #>           31           32           33           34           35           36  #>  23.77066429  29.49103752  13.14979830  37.99270507  24.98027919  24.68618512  #>           37           38           39           40           41           42  #>  20.64454500  35.09349513  18.72287056  10.70568105   4.46069197   9.57241450  #>           43           44           45           46           47           48  #>  23.24354861   6.93361535  23.00839335  29.88152393   3.18760551   3.51368027  #>           49           50            1            2            3            4  #>  -2.65932662  19.90844734  -2.30094570  -1.64175976  -5.85126411 -12.77777487  #>            5            6            7            8            9           10  #>   9.23972300  15.95466703 -12.51262829  21.55539666 -10.29439955 -10.98162849  #>           11           12           13           14           15           16  #>  26.54470351  10.95758017  24.63312743   7.44874251  20.26776770  16.49004804  #>           17           18           19           20           21           22  #>  36.45757962  31.93880458  30.04080014  11.19185167   4.58611734  27.00338539  #>           23           24           25           26           27           28  #>  37.06313891  26.17489174  50.91129932  22.07842639  52.33180209  32.57788121  #>           29           30           31           32           33           34  #>  20.40582736  35.53504518  29.37694413  42.30839644  35.15408759  52.49333051  #>           35           36           37           38           39           40  #>  36.24683721  36.15475380  35.45432106  58.27673454  50.66832496  34.03114207  #>           41           42           43           44           45           46  #>  32.90950562  54.82621914  72.41226504  66.80425029  61.93837213  40.19688273  #>           47           48           49           50            1            2  #>  70.83915421  59.69267394  67.46755133  64.75694955  13.05141585  17.28018254  #>            3            4            5            6            7            8  #>   9.12527482  -4.09408249  32.72940375  -9.87060688  11.63995462   5.72567519  #>            9           10           11           12           13           14  #>  -4.80400786  10.64755306  20.52638990  33.20441506   8.67320077  28.34850908  #>           15           16           17           18           19           20  #>  10.44774732  12.93118763   4.07078256  31.75933894  29.27913709   1.45073873  #>           21           22           23           24           25           26  #>  10.13067918  19.03686135  28.14297180  32.61524763  20.79006401   8.89942272  #>           27           28           29           30           31           32  #>  13.09685889  27.17327126  33.94727037  42.21766046  14.80460597  14.25482753  #>           33           34           35           36           37           38  #>  38.84815705   7.24509024   9.25936972  27.56945122  21.72516626  11.02785156  #>           39           40           41           42           43           44  #>  26.34099738  40.30767358  25.00443180  13.48463179  48.35464533  43.61950286  #>           45           46           47           48           49           50  #>  27.73124084  38.19403088  42.85060381  50.55964838  23.18511158  42.65663555  #>            1            2            3            4            5            6  #>  50.89715940  55.01414849  69.01617974  45.34057272  65.28488162  54.77875058  #>            7            8            9           10           11           12  #>  63.53745928  46.26075502  42.70941339  36.57030290  60.43810531  49.62266486  #>           13           14           15           16           17           18  #>  58.97640012  41.76284435  45.28198540  40.05912167  63.88843538  35.28439801  #>           19           20           21           22           23           24  #>  35.21781467  34.05667825  32.69483012  36.45816117  45.50945626  54.59847368  #>           25           26           27           28           29           30  #>  33.75131744  56.44796095  46.67834335  24.80680814  57.69382993  35.37638878  #>           31           32           33           34           35           36  #>  21.39170357  45.76985514  23.98474622  35.42256088  39.01654068  31.79582094  #>           37           38           39           40           41           42  #>  22.85108118  29.38701608  31.58032289  35.08831891  38.54153040  53.30931373  #>           43           44           45           46           47           48  #>  45.71514864  21.93588169  31.88890749  35.36109231  10.29306386  41.18449017  #>           49           50            1            2            3            4  #>  29.83843062  15.58679657  77.78690862  48.49580394  71.85815258  67.59214031  #>            5            6            7            8            9           10  #>  58.62503441  48.17823633  41.47909968  63.75735645  63.27702724  54.93491347  #>           11           12           13           14           15           16  #>  74.68297527  81.53823331  67.33584462  50.96533963  66.22927568  76.71826788  #>           17           18           19           20           21           22  #>  71.31821096  52.78927708  59.93053326  57.69078986  82.34460481  56.46162807  #>           23           24           25           26           27           28  #>  73.43317460  52.26605121  49.86750748  51.72214642  84.58189978  59.92114815  #>           29           30           31           32           33           34  #>  83.71680980  78.06939460  75.35528606  58.09680248  52.30149993  52.24584913  #>           35           36           37           38           39           40  #>  58.74095874  65.11669051  79.51734806  59.51459797  71.08799710  78.25994229  #>           41           42           43           44           45           46  #>  76.87380307  59.05936841  89.68001215  51.85309663  58.41492324  75.21495001  #>           47           48           49           50            1            2  #>  50.82589170  51.05659667  77.05130764  74.41652569  27.90395673  60.28622776  #>            3            4            5            6            7            8  #>  41.26236605  51.57501080  26.04094485  42.32813274  63.62822104  61.20922396  #>            9           10           11           12           13           14  #>  37.73066281  52.02669970  30.12741832  58.23876979  39.60586673  57.47181327  #>           15           16           17           18           19           20  #>  54.68509454  34.28893476  40.01267956  39.18363660  23.39347868  50.19056596  #>           21           22           23           24           25           26  #>  41.60496750  32.68008421  53.39507832  33.72679225  41.06602529  35.78612644  #>           27           28           29           30           31           32  #>  63.16576794  31.23662069  44.27272972  48.28479159  40.01615453  52.65728607  #>           33           34           35           36           37           38  #>  59.23610431  38.17714439  64.42440337  69.04765050  32.57488265  35.09314116  #>           39           40           41           42           43           44  #>  50.88796892  45.57619113  46.59697070  48.90422032  40.82235534  60.61069129  #>           45           46           47           48           49           50  #>  31.90486447  60.26737779  38.23718820  49.57205653  66.56426830  47.93913701  #>            1            2            3            4            5            6  #>   7.76487581  -0.20810255   0.58144173   1.94100400  20.61407191  31.48545332  #>            7            8            9           10           11           12  #>  -5.99751268  20.87031724  41.42562169  30.53268297   7.60857858  -2.09358599  #>           13           14           15           16           17           18  #>  25.98037421  41.82955353  21.01889795  32.14928284  21.74541450  13.45279644  #>           19           20           21           22           23           24  #>  49.82549498  48.10636207   4.48462042  50.38802654  44.58125837  34.85310054  #>           25           26           27           28           29           30  #>  25.38351101  22.18913646   6.50617911  -0.18409981  23.58707687  13.65729696  #>           31           32           33           34           35           36  #>  41.28920955  49.68955315  16.55816966  46.77992045   9.48110339  42.12679325  #>           37           38           39           40           41           42  #>  30.02650263  22.35385531  48.01055427  15.78688997  25.48902834  45.91107485  #>           43           44           45           46           47           48  #>   2.77283188  23.50286854   3.84814257   8.70483295  12.38620060  16.75483885  #>           49           50            1            2            3            4  #>  18.57665072  22.94385646  31.59345671  51.29794197  41.86664459  52.28247875  #>            5            6            7            8            9           10  #>  31.95174092  50.45911462  21.46388694  16.06618700  56.43864850  47.70732622  #>           11           12           13           14           15           16  #>  50.30136790  28.79536209  69.57182494  69.31729717  28.09478800  64.96265069  #>           17           18           19           20           21           22  #>  57.55225014  74.88870429  78.25324600  56.07282048  76.14785664  54.92942728  #>           23           24           25           26           27           28  #>  51.76125826  77.66917196  81.09115859  81.35375600  53.06107279  57.69908941  #>           29           30           31           32           33           34  #>  60.58257387  73.79538567  89.83697494  90.08986885  77.11513391  89.02589669  #>           35           36           37           38           39           40  #>  91.31391053  98.65949216  81.37008405  77.55988756  65.20024915  93.59157186  #>           41           42           43           44           45           46  #>  79.88116645 102.37700837  80.28553317  84.78226827  86.24478777 113.73218675  #>           47           48           49           50            1            2  #>  93.42747265 104.19199305  98.84629517 107.57265765  40.90308119  61.05794937  #>            3            4            5            6            7            8  #>  62.18253884  60.73428867  39.19020591  44.59272180  48.82944985  50.85885888  #>            9           10           11           12           13           14  #>  53.20763950  57.49824442  66.81691854  54.35323864  50.45746794  66.27718655  #>           15           16           17           18           19           20  #>  60.55180498  54.73764281  39.66178496  63.89370589  68.11719940  54.12639161  #>           21           22           23           24           25           26  #>  49.63556591  49.09290613  58.99967448  49.58004992  50.07306449  51.02573897  #>           27           28           29           30           31           32  #>  63.07670355  51.50282145  73.97777945  74.34225762  69.49636667  71.37821035  #>           33           34           35           36           37           38  #>  51.08827770  54.18733250  68.49576818  64.96671779  74.23628776  61.07517669  #>           39           40           41           42           43           44  #>  65.35032665  71.92868316  66.78032204  53.49073710  65.33131351  57.21195680  #>           45           46           47           48           49           50  #>  71.68095524  59.54266311  77.52947907  83.43032984  73.18782549  87.84797428  #>            1            2            3            4            5            6  #>  37.81738546  38.98017586  31.25903846  22.88144335  40.08742185  24.01572121  #>            7            8            9           10           11           12  #>  28.58521133  37.42464484  30.44604101  21.39806356  42.62595646  29.08250412  #>           13           14           15           16           17           18  #>  37.80019317  19.39540549  33.94263838  25.23377997  29.55224218  22.06655797  #>           19           20           21           22           23           24  #>  40.30637848  21.03366202  42.19398850  40.54858833  21.34015868  30.30360260  #>           25           26           27           28           29           30  #>  30.69645994  20.28642001  30.07329158  21.12342249  22.77902510  27.73927473  #>           31           32           33           34           35           36  #>  18.73560254  40.20218113  27.51885615  29.87526818  34.26209431  30.06937888  #>           37           38           39           40           41           42  #>  38.72572849  15.27201289  13.38948725  26.88997055  18.65320002  29.10186781  #>           43           44           45           46           47           48  #>  22.15123989  12.39855018  12.62214129  36.83535519  16.72186145  10.58456124  #>           49           50            1            2            3            4  #>  16.97438102  11.92784164  -3.61418291   2.61363590 -14.85880141  -0.58473997  #>            5            6            7            8            9           10  #>   9.00610314   9.02608552  -3.87623925  10.40510183  21.20046352 -16.77985750  #>           11           12           13           14           15           16  #>  12.67030183  13.15788982 -14.64782608   6.27704594   5.77312550 -12.89595529  #>           17           18           19           20           21           22  #>  -2.66178466  -4.08353162  15.98386576  -6.65907406   7.31325057  12.26995053  #>           23           24           25           26           27           28  #>  -3.98067682   0.41897037   7.36029070 -11.16101898   7.05129848  17.82927066  #>           29           30           31           32           33           34  #>   0.84776144  20.92316060  23.29101127   7.49506562  -5.01853498  -9.48313228  #>           35           36           37           38           39           40  #>  -4.62234834  13.61688507 -15.07475259  -7.36916200   0.72256924  -2.59412870  #>           41           42           43           44           45           46  #>  12.58320772  20.22036738 -16.69161595  15.38745590   2.04818795  12.88008281  #>           47           48           49           50            1            2  #>  -8.08129109   6.18894206  17.27581312   5.51474633  15.54426221   8.19743885  #>            3            4            5            6            7            8  #>   3.60839390  16.22094841  19.45068649 -14.22554508 -10.62934467  -9.87493943  #>            9           10           11           12           13           14  #>  21.94526806  26.03259334  -0.05331220   9.08932857  22.12432592   8.98765342  #>           15           16           17           18           19           20  #>  10.75736803  36.81389377  12.18474191   0.99747481  34.20351297  34.63460070  #>           21           22           23           24           25           26  #>   4.40024232   5.96469019  22.65408808   4.21172500  34.31092046  53.93908157  #>           27           28           29           30           31           32  #>  27.34494555  27.12626779  36.29202413  23.44297740  34.54016278  36.65406144  #>           33           34           35           36           37           38  #>  66.27918295  66.46966845  57.65309562  62.91554355  74.35157178  58.31525814  #>           39           40           41           42           43           44  #>  41.11618855  35.16766972  72.49345290  77.71208338  80.10385309  43.23422987  #>           45           46           47           48           49           50  #>  68.11495562  81.55540471  45.75784237  61.80761216  53.42016073  65.39025319  #>            1            2            3            4            5            6  #>  21.72830581  42.98850970  40.61836745  39.49212300  30.80421592  11.49136035  #>            7            8            9           10           11           12  #>   5.06707402  17.42204880  15.14049048  37.43507394  25.50918305  26.28521379  #>           13           14           15           16           17           18  #>   8.13375749  16.80986016  35.93598689  21.07638241  10.09055869  38.99006276  #>           19           20           21           22           23           24  #>  30.94069424   7.94540418  22.63726677  25.01388518  21.01845902  38.20526527  #>           25           26           27           28           29           30  #>  23.64646018  34.58723148  32.83136958  42.94058873  36.21608686  37.52320715  #>           31           32           33           34           35           36  #>  28.40224995  40.29024587   9.02498448  40.57724103  12.95592641  49.73677548  #>           37           38           39           40           41           42  #>  17.77453928  19.54390220  45.58124880  23.64991430  32.13737259  30.80372717  #>           43           44           45           46           47           48  #>  38.74962106  38.13402215  17.70082463  22.41869905  25.57829372  28.99061807  #>           49           50            1            2            3            4  #>  42.69092684  24.23626104  47.41516733  38.25669606  50.27685131  62.48485830  #>            5            6            7            8            9           10  #>  47.44390222  42.94134961  66.33676851  40.58178358  46.33767183  67.88653394  #>           11           12           13           14           15           16  #>  64.66309575  43.63006017  66.81842964  66.12888579  41.36173360  42.90924624  #>           17           18           19           20           21           22  #>  59.20034567  36.65816797  56.11906630  40.55491157  69.47538616  42.39747737  #>           23           24           25           26           27           28  #>  63.40973151  60.37350482  58.34727142  40.77924513  58.05456142  64.56112239  #>           29           30           31           32           33           34  #>  50.28945688  71.08652396  58.54652028  60.04584141  51.56935609  49.90855740  #>           35           36           37           38           39           40  #>  53.94294847  72.88985221  49.01868678  51.13181782  71.25183176  57.44122154  #>           41           42           43           44           45           46  #>  76.40276078  48.40880040  56.18061072  55.95335165  54.07142584  58.76036971  #>           47           48           49           50  #>  61.30124507  49.07361927  80.74561222  83.48776968"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment, fit, fit_xy, glance, tidy","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest transformation — step_nest","title":"Nest transformation — step_nest","text":"step_nest creates specification recipe step convert specified data single model term, specifying 'nest' row dataset corresponds .","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest transformation — step_nest","text":"","code":"step_nest(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   names = NULL,   lookup_table = NULL,   skip = FALSE,   id = recipes::rand_id(\"nest\") )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest transformation — step_nest","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables. step_nest, indicates variables nested. See recipes::selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. names names variables selected ... stored preprocessing step trained recipes::prep(). lookup_table table describing values selected columns correspond 'nest_id' stored preprocessing step trained recipes::prep(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nest transformation — step_nest","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nest transformation — step_nest","text":"step_nest() create single nominal variable (named 'nest_id') set variables (type). Every unique combination specified columns recieve single nest id. recipe step designed use nested models, since model fitted data corresponding nest id. Using recipe often easier reliable nesting data manually. nest id corresponding unique combination column values decided recipe prepped (recipe contained workflow, happens workflow fitted). means using prepped recipe new data (using recipes::prep() workflows::predict.workflow()), unique combinations nesting columns must also exist training data. warned case. using 'rsample' package create splits presents issue, may want consider using nested_resamples(). step_nest() designed nesting transformed data 'nest_id' column equivalent following action non-transformed data:","code":"data %>%   dplyr::group_by(...) %>% # ... represents your specified terms   tidyr::nest()"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest transformation — step_nest","text":"","code":"data(\"example_nested_data\")  recipe <- recipes::recipe(example_nested_data, z ~ x + id) %>%   step_nest(id)  recipe %>%   recipes::prep() %>%   recipes::bake(NULL) #> # A tibble: 1,000 × 3 #>        x     z nest_id #>    <int> <dbl> <fct>   #>  1    49 36.0  Nest 1  #>  2    50 38.7  Nest 1  #>  3    51 23.4  Nest 1  #>  4    52 34.2  Nest 1  #>  5    53  9.51 Nest 1  #>  6    54 39.7  Nest 1  #>  7    55  9.72 Nest 1  #>  8    56 17.0  Nest 1  #>  9    57 42.5  Nest 1  #> 10    58 31.8  Nest 1  #> # … with 990 more rows  recipe2 <- recipes::recipe(example_nested_data, z ~ x + id) %>%   step_nest(- c(x, z))  recipe %>%   recipes::prep() %>%   recipes::bake(NULL) #> # A tibble: 1,000 × 3 #>        x     z nest_id #>    <int> <dbl> <fct>   #>  1    49 36.0  Nest 1  #>  2    50 38.7  Nest 1  #>  3    51 23.4  Nest 1  #>  4    52 34.2  Nest 1  #>  5    53  9.51 Nest 1  #>  6    54 39.7  Nest 1  #>  7    55  9.72 Nest 1  #>  8    56 17.0  Nest 1  #>  9    57 42.5  Nest 1  #> 10    58 31.8  Nest 1  #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"Use broom functions fitted nested models. tidy.nested_model_fit summarises components model within nested model fit, indicating nested data frame row corresponds . glance.nested_model_fit summarises nested model, returning tibble::tibble() 1 row. glance_nested summarises model within nested model fit, returning tibble::tibble() number rows number inner models.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"","code":"# S3 method for nested_model_fit tidy(x, ...)  # S3 method for nested_model_fit glance(x, ...)  glance_nested(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"x object converted tidy tibble::tibble(). ... Additional arguments passed respective functions. (e.g. tidy.nested_model_fit, parsnip::tidy.model_fit()).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"tibble::tibble(). glance.nested_model_fit(), tibble 1 row.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"generics::glance() states glance methods always return 1 row outputs non-empty inputs. 'nestedmodels' package exception: glance methods combine rows produce result single row. Specifically: column contains 1 unique value, value used. column numeric, mean calculated. Otherwise, results combined list.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"","code":"if (require(\"broom\")) {   model <- parsnip::linear_reg() %>%     parsnip::set_engine(\"lm\") %>%     nested()    fit <- fit(model, z ~ x + y + a + b,               dplyr::group_by(example_nested_data, id))    tidy(fit)   glance(fit)   glance_nested(fit) } #> Loading required package: broom #> # A tibble: 20 × 13 #>       id r.squ…¹ adj.r…² sigma stati…³  p.value    df logLik   AIC   BIC devia…⁴ #>    <int>   <dbl>   <dbl> <dbl>   <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl> #>  1     1   0.453   0.404 18.0     9.31 1.43e- 5     4  -213.  438.  449.  14617. #>  2     2   0.499   0.454 15.3    11.2  2.18e- 6     4  -205.  421.  433.  10476. #>  3     3   0.456   0.408 12.9     9.44 1.25e- 5     4  -196.  404.  416.   7477. #>  4     4   0.594   0.558  7.25   16.5  2.23e- 8     4  -167.  347.  358.   2368. #>  5     5   0.293   0.230 18.5     4.65 3.15e- 3     4  -214.  440.  452.  15397. #>  6     6   0.864   0.852  4.83   71.7  6.12e-19     4  -147.  306.  318.   1051. #>  7     7   0.477   0.430 14.9    10.2  5.52e- 6     4  -203.  418.  430.   9932. #>  8     8   0.779   0.759 12.9    39.6  3.42e-14     4  -196.  405.  416.   7535. #>  9     9   0.534   0.493 14.2    12.9  4.40e- 7     4  -201.  414.  425.   9021. #> 10    10   0.758   0.737  7.91   35.3  2.43e-13     4  -172.  355.  367.   2818. #> 11    11   0.745   0.722  7.35   32.9  7.88e-13     4  -168.  348.  360.   2429. #> 12    12   0.327   0.267 17.6     5.47 1.12e- 3     4  -212.  435.  447.  13883. #> 13    13   0.485   0.439 17.5    10.6  3.93e- 6     4  -211.  435.  446.  13822. #> 14    14   0.501   0.457 24.6    11.3  1.96e- 6     4  -228.  469.  480.  27142. #> 15    15   0.215   0.146 21.9     3.09 2.49e- 2     4  -223.  457.  469.  21605. #> 16    16   0.247   0.181 16.5     3.70 1.09e- 2     4  -208.  429.  440.  12204. #> 17    17   0.778   0.759  6.16   39.5  3.48e-14     4  -159.  330.  342.   1709. #> 18    18   0.876   0.865 10.3    79.6  7.99e-20     4  -185.  382.  393.   4791. #> 19    19   0.536   0.495 11.1    13.0  4.10e- 7     4  -189.  389.  400.   5510. #> 20    20   0.611   0.576  9.49   17.6  8.93e- 9     4  -181.  374.  385.   4057. #> # … with 2 more variables: df.residual <int>, nobs <int>, and abbreviated #> #   variable names ¹​r.squared, ²​adj.r.squared, ³​statistic, ⁴​deviance"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"}]
