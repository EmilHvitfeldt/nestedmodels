[{"path":"https://ashbythorpe.github.io/nestedmodels/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 nestedmodels authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"what-is-the-alternative","dir":"Articles","previous_headings":"","what":"What is the alternative?","title":"nestedmodels-limitations","text":"datasets, issues problematic ignore. cases, alternative approach obvious: just use non-nested model. ‘recipes’ package many methods dealing categorical data, models likely give promising results. However, models, notably forecasting algorithms, nestedmodels can seem like solution forecasting panel data. specific case, global forecasting method recommended (e.g. ‘Prophet’ gradient boosting model), since models can deal categorical data. general, better find model suit needs, rather sticking ","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"nestedmodels-limitations","text":"vignette, discussed conditions reasons nested modelling best approach every situation, respond case.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"what-is-nestedmodels","dir":"Articles","previous_headings":"","what":"What is nestedmodels?","title":"nestedmodels","text":"nestedmodels extension ‘tidymodels’ framework. allows models workflows used nested data. provides alternative ‘modeltime’’s approach nested modelling ‘multilevelmod’ package, allowing model workflow used nested data easily.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"why-do-i-need-nestedmodels","dir":"Articles","previous_headings":"","what":"Why do I need nestedmodels?","title":"nestedmodels","text":"best example may need use nestedmodels package working panel data. set time series, describing different object (historic prices set stocks, example), may want model time series separately, especially considering fact many time series modelling tools work well non-date predictors (furthermore, many models accept non-numeric predictors, although often better ways deal problem; see recipes::step_dummy()). scenario, nested modelling often best solution.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"how-does-nestedmodels-work","dir":"Articles","previous_headings":"","what":"How does nestedmodels work?","title":"nestedmodels","text":"implementation nestedmodels simple. Fitting nested model fits model nested value (time series set stocks, model fitted stock). correct model selected used making predictions.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"a-quick-example","dir":"Articles","previous_headings":"","what":"A quick example","title":"nestedmodels","text":"vignette, ’re going explore basic example nested model. ’re going need following packages: ’re going use example data included ‘nestedmodels’ package. data simple, serves example data can nested, rather representing anything concrete. data can nested following way: Lets split data training testing set using nested_resamples() function. ensures training testing set contain data every ‘id’ value. Now let’s define model: Since ’re fitting model nested data, need way make model ‘nested’. simple nested() function. can fit model usual way. Note data must nested, formula include id column. Predicting can also done usual way (data predict can nested non-nested). Since just demonstration, use data model fitted . method fine, nest data pain. can solve using workflow. first define recipe, define step used nest data. time, formula can include ‘id’ column, since recipe needs act . little easier nesting data manually. Note recipe actually nest data, instead removes specified columns adds new column, ‘nest_id’, specifies nest row belongs . Now create workflow, combining recipe model. workflow can fitted way model, note since used step_nest() data nested. fit object can used make predictions. common parsnip functions can also used fitted nested models: really need know use nestedmodels package. models workflows can compared, fitted tuned much way normal models workflows - can even combine normal models using ‘workflowsets’ ‘stacks’ packages.","code":"data(\"example_nested_data\") data <- example_nested_data data #> # A tibble: 1,000 × 7 #>       id   id2     x     y     z     a     b #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  239. 36.0   44.7 50.0  #>  2     1     1    50  313. 38.7   40.2 64.9  #>  3     1     1    51 -109. 23.4   43.2 38.0  #>  4     1     1    52  189. 34.2   66.4 61.7  #>  5     1     1    53 -491.  9.51  18.2 -1.66 #>  6     1     1    54  339. 39.7   83.8 38.8  #>  7     1     1    55 -486.  9.72  91.7 40.7  #>  8     1     1    56 -284. 17.0   79.8 55.4  #>  9     1     1    57  416. 42.5   50.3 33.8  #> 10     1     1    58  122. 31.8   25.4 20.5  #> # … with 990 more rows nested_data <- nest(data, data = -id) nested_data #> # A tibble: 20 × 2 #>       id data              #>    <int> <list>            #>  1     1 <tibble [50 × 6]> #>  2     2 <tibble [50 × 6]> #>  3     3 <tibble [50 × 6]> #>  4     4 <tibble [50 × 6]> #>  5     5 <tibble [50 × 6]> #>  6     6 <tibble [50 × 6]> #>  7     7 <tibble [50 × 6]> #>  8     8 <tibble [50 × 6]> #>  9     9 <tibble [50 × 6]> #> 10    10 <tibble [50 × 6]> #> 11    11 <tibble [50 × 6]> #> 12    12 <tibble [50 × 6]> #> 13    13 <tibble [50 × 6]> #> 14    14 <tibble [50 × 6]> #> 15    15 <tibble [50 × 6]> #> 16    16 <tibble [50 × 6]> #> 17    17 <tibble [50 × 6]> #> 18    18 <tibble [50 × 6]> #> 19    19 <tibble [50 × 6]> #> 20    20 <tibble [50 × 6]> split <- nested_resamples(nested_data, rsample::initial_split()) data_tr <- rsample::training(split) data_tst <- rsample::testing(split) model <- linear_reg(penalty = 0.1) %>%   set_engine(\"glmnet\") nested_model <- model %>%   nested() nested_model #> Nested Model Specification #>  #> Inner model: #> Linear Regression Model Specification (regression) #>  #> Main Arguments: #>   penalty = 0.1 #>  #> Computational engine: glmnet nested_tr <- tidyr::nest(data_tr, data = -id) model_fit <- fit(nested_model, z ~ x + y + a + b, nested_tr) model_fit #> Nested model fit, with 20 inner models #> # A tibble: 20 × 2 #>       id .model_fit #>    <int> <list>     #>  1     1 <fit[+]>   #>  2     2 <fit[+]>   #>  3     3 <fit[+]>   #>  4     4 <fit[+]>   #>  5     5 <fit[+]>   #>  6     6 <fit[+]>   #>  7     7 <fit[+]>   #>  8     8 <fit[+]>   #>  9     9 <fit[+]>   #> 10    10 <fit[+]>   #> 11    11 <fit[+]>   #> 12    12 <fit[+]>   #> 13    13 <fit[+]>   #> 14    14 <fit[+]>   #> 15    15 <fit[+]>   #> 16    16 <fit[+]>   #> 17    17 <fit[+]>   #> 18    18 <fit[+]>   #> 19    19 <fit[+]>   #> 20    20 <fit[+]> predict(model_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1 42.0  #>  2 39.2  #>  3  7.67 #>  4 47.5  #>  5 31.5  #>  6 49.9  #>  7 50.0  #>  8 13.7  #>  9 12.7  #> 10 15.9  #> # … with 250 more rows recipe <- recipe(data_tr, z ~ x + y + a + b + id) %>%   step_nest(id) recipe %>%   prep() %>%   bake(NULL) #> # A tibble: 740 × 6 #>        x      y     a     b      z nest_id #>    <int>  <dbl> <dbl> <dbl>  <dbl> <fct>   #>  1    64  474.  80.6   49.1  36.7  Nest 1  #>  2    74  275.  98.7   57.2  46.0  Nest 1  #>  3    51 -109.  43.2   38.0  23.4  Nest 1  #>  4    60  -52.2 94.1   54.7  25.5  Nest 1  #>  5    66  158.  30.4   60.6  25.3  Nest 1  #>  6    76 -301.  60.8   72.2  42.6  Nest 1  #>  7    98 -448.  18.6   28.0 -14.4  Nest 1  #>  8    57  416.  50.3   33.8  42.5  Nest 1  #>  9    81  293.   2.82  58.2  64.2  Nest 1  #> 10    91 -241.  40.2   64.0  -6.88 Nest 1  #> # … with 730 more rows wf <- workflow() %>%   add_model(nested_model) %>%   add_recipe(recipe) wf_fit <- fit(wf, data_tr) predict(wf_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1 42.0  #>  2 39.2  #>  3  7.67 #>  4 47.5  #>  5 31.5  #>  6 49.9  #>  7 50.0  #>  8 13.7  #>  9 12.7  #> 10 15.9  #> # … with 250 more rows augment(wf_fit, data_tst) #> # A tibble: 260 × 8 #>       id   id2     x     y     z     a      b .pred #>    <int> <int> <int> <dbl> <dbl> <dbl>  <dbl> <dbl> #>  1     1     1    49  239. 36.0  44.7  50.0   42.0  #>  2     1     1    52  189. 34.2  66.4  61.7   39.2  #>  3     1     1    55 -486.  9.72 91.7  40.7    7.67 #>  4     1     1    65  405. 34.2  54.8  74.7   47.5  #>  5     1     1    68  139. 24.6   2.76 55.4   31.5  #>  6     1     1    72  309. 47.2  59.7  26.0   49.9  #>  7     1     2    75  204. 61.0  82.9   0.128 50.0  #>  8     1     2    77 -210. 45.9  13.8  51.9   13.7  #>  9     1     2    84 -275. 43.6  83.0  71.5   12.7  #> 10     1     2    88 -219. 37.7  58.2  55.9   15.9  #> # … with 250 more rows tidy(wf_fit) #> # A tibble: 100 × 4 #>    nest_id term         estimate penalty #>    <fct>   <chr>           <dbl>   <dbl> #>  1 Nest 1  (Intercept)   34.6        0.1 #>  2 Nest 1  x             -0.0358     0.1 #>  3 Nest 1  y              0.0545     0.1 #>  4 Nest 1  a              0.0837     0.1 #>  5 Nest 1  b             -0.153      0.1 #>  6 Nest 2  (Intercept) -101.         0.1 #>  7 Nest 2  x              0.742      0.1 #>  8 Nest 2  y              0.0294     0.1 #>  9 Nest 2  a             -0.0290     0.1 #> 10 Nest 2  b              0.0486     0.1 #> # … with 90 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"nestedmodels","text":"short vignette, simple example nested model workflow created used dummy data, demonstrate nestedmodels used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ashby Thorpe. Author, maintainer.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorpe (2022). nestedmodels: Tidymodels Nested/Panel Data. https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/.","code":"@Manual{,   title = {nestedmodels: Tidymodels for Nested/Panel Data},   author = {Ashby Thorpe},   year = {2022},   note = {https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/}, }"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"nestedmodels","dir":"","previous_headings":"","what":"Tidymodels for Nested/Panel Data","title":"Tidymodels for Nested/Panel Data","text":"goal nestedmodels allow modelling nested data. models accept certain predictors. panel data, often desirable create model panel. nestedmodels enhances ‘tidymodels’ set packages allowing user classify model ‘nested’.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidymodels for Nested/Panel Data","text":"can install development version nestedmodels like :","code":"# install.packages(\"devtools\") devtools::install_github(\"ashbythorpe/nestedmodels\")"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tidymodels for Nested/Panel Data","text":"basic example shows solve common problem:","code":"library(nestedmodels)  data(\"example_nested_data\")  nested_data <- tidyr::nest(example_nested_data, data = -id)  split <- nested_resamples(nested_data, rsample::initial_split())  data_tr <- rsample::training(split) data_tst <- rsample::testing(split)  model <- parsnip::linear_reg() %>%   nested()  fit <- fit(model, z ~ x + y + a + b,             tidyr::nest(data_tr, data = -id))  predict(fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  42.5 #>  2  51.8 #>  3  53.5 #>  4  30.5 #>  5  18.6 #>  6  45.0 #>  7  19.1 #>  8  38.6 #>  9  48.7 #> 10  17.2 #> # … with 250 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with predictions — augment.nested_model_fit","title":"Augment data with predictions — augment.nested_model_fit","text":"generics::augment() method nested models. augment() add column(s) predictions given data.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"# S3 method for nested_model_fit augment(x, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with predictions — augment.nested_model_fit","text":"x nested_model_fit object produced fit.nested_model(). new_data data frame - can nested non-nested. ... Passed onto parsnip::augment.model_fit().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with predictions — augment.nested_model_fit","text":"data frame one added columns predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -c(id, id2))  fitted <- fit(model, z ~ x + y + a + b, nested_data)  augment(fitted, example_nested_data) #> # A tibble: 1,000 × 7 #>        x     y     z     a     b .pred .resid #>    <int> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #>  1    49  239. 36.0   44.7 50.0   31.4  4.55  #>  2    50  313. 38.7   40.2 64.9   32.5  6.22  #>  3    51 -109. 23.4   43.2 38.0   21.7  1.64  #>  4    52  189. 34.2   66.4 61.7   30.6  3.56  #>  5    53 -491.  9.51  18.2 -1.66  12.0 -2.45  #>  6    54  339. 39.7   83.8 38.8   38.6  1.02  #>  7    55 -486.  9.72  91.7 40.7   13.0 -3.29  #>  8    56 -284. 17.0   79.8 55.4   17.7 -0.651 #>  9    57  416. 42.5   50.3 33.8   40.2  2.25  #> 10    58  122. 31.8   25.4 20.5   30.8  0.954 #> # … with 990 more rows"}]
