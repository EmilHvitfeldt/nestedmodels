[{"path":"https://ashbythorpe.github.io/nestedmodels/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 nestedmodels authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"what-is-the-alternative","dir":"Articles","previous_headings":"","what":"What is the alternative?","title":"nestedmodels-limitations","text":"datasets, issues problematic ignore. cases, alternative approach obvious: just use non-nested model. ‘recipes’ package many methods dealing categorical data, models likely give promising results. However, models, notably forecasting algorithms, nestedmodels can seem like solution forecasting panel data. specific case, global forecasting method recommended (e.g. ‘Prophet’ gradient boosting model), since models can deal categorical data. general, better find model suit needs, rather sticking ","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"nestedmodels-limitations","text":"vignette, discussed conditions reasons nested modelling best approach every situation, respond case.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"what-is-nestedmodels","dir":"Articles","previous_headings":"","what":"What is nestedmodels?","title":"nestedmodels","text":"nestedmodels extension ‘tidymodels’ framework. allows models workflows used nested data. provides alternative ‘modeltime’’s approach nested modelling ‘multilevelmod’ package, allowing model workflow used nested data easily.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"why-do-i-need-nestedmodels","dir":"Articles","previous_headings":"","what":"Why do I need nestedmodels?","title":"nestedmodels","text":"best example may need use nestedmodels package working panel data. set time series, describing different object (historic prices set stocks, example), may want model time series separately, especially considering fact many time series modelling tools work well non-date predictors (furthermore, many models accept non-numeric predictors, although often better ways deal problem; see recipes::step_dummy()). scenario, nested modelling often best solution.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"how-does-nestedmodels-work","dir":"Articles","previous_headings":"","what":"How does nestedmodels work?","title":"nestedmodels","text":"implementation nestedmodels simple. Fitting nested model fits model nested value (time series set stocks, model fitted stock). correct model selected used making predictions.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"a-quick-example","dir":"Articles","previous_headings":"","what":"A quick example","title":"nestedmodels","text":"vignette, ’re going explore basic example nested model. ’re going need following packages: ’re going use example data included ‘nestedmodels’ package. data simple, serves example data can nested, rather representing anything concrete. data can nested following way: Lets split data training testing set using nested_resamples() function. ensures training testing set contain data every ‘id’ value. Now let’s define model: Since ’re fitting model nested data, need way make model ‘nested’. simple nested() function. can fit model usual way. Note data must nested, formula include id column. Predicting can also done usual way (data predict can nested non-nested). Since just demonstration, use data model fitted . method fine, nest data pain. can solve using workflow. first define recipe, define step used nest data. time, formula can include ‘id’ column, since recipe needs act . little easier nesting data manually. Note recipe actually nest data, instead removes specified columns adds new column, ‘nest_id’, specifies nest row belongs . Now create workflow, combining recipe model. workflow can fitted way model, note since used step_nest() data nested. fit object can used make predictions. common parsnip functions can also used fitted nested models: really need know use nestedmodels package. models workflows can compared, fitted tuned much way normal models workflows - can even combine normal models using ‘workflowsets’ ‘stacks’ packages.","code":"data(\"example_nested_data\") data <- example_nested_data data #> # A tibble: 1,000 × 7 #>       id   id2     x     y     z     a     b #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  239. 36.0   44.7 50.0  #>  2     1     1    50  313. 38.7   40.2 64.9  #>  3     1     1    51 -109. 23.4   43.2 38.0  #>  4     1     1    52  189. 34.2   66.4 61.7  #>  5     1     1    53 -491.  9.51  18.2 -1.66 #>  6     1     1    54  339. 39.7   83.8 38.8  #>  7     1     1    55 -486.  9.72  91.7 40.7  #>  8     1     1    56 -284. 17.0   79.8 55.4  #>  9     1     1    57  416. 42.5   50.3 33.8  #> 10     1     1    58  122. 31.8   25.4 20.5  #> # … with 990 more rows nested_data <- nest(data, data = -id) nested_data #> # A tibble: 20 × 2 #>       id data              #>    <int> <list>            #>  1     1 <tibble [50 × 6]> #>  2     2 <tibble [50 × 6]> #>  3     3 <tibble [50 × 6]> #>  4     4 <tibble [50 × 6]> #>  5     5 <tibble [50 × 6]> #>  6     6 <tibble [50 × 6]> #>  7     7 <tibble [50 × 6]> #>  8     8 <tibble [50 × 6]> #>  9     9 <tibble [50 × 6]> #> 10    10 <tibble [50 × 6]> #> 11    11 <tibble [50 × 6]> #> 12    12 <tibble [50 × 6]> #> 13    13 <tibble [50 × 6]> #> 14    14 <tibble [50 × 6]> #> 15    15 <tibble [50 × 6]> #> 16    16 <tibble [50 × 6]> #> 17    17 <tibble [50 × 6]> #> 18    18 <tibble [50 × 6]> #> 19    19 <tibble [50 × 6]> #> 20    20 <tibble [50 × 6]> split <- nested_resamples(nested_data, rsample::initial_split()) data_tr <- rsample::training(split) data_tst <- rsample::testing(split) model <- linear_reg(penalty = 0.1) %>%   set_engine(\"glmnet\") nested_model <- model %>%   nested() nested_model #> Nested Model Specification #>  #> Inner model: #> Linear Regression Model Specification (regression) #>  #> Main Arguments: #>   penalty = 0.1 #>  #> Computational engine: glmnet nested_tr <- tidyr::nest(data_tr, data = -id) model_fit <- fit(nested_model, z ~ x + y + a + b, nested_tr) model_fit #> Nested model fit, with 20 inner models #> # A tibble: 20 × 2 #>       id .model_fit #>    <int> <list>     #>  1     1 <fit[+]>   #>  2     2 <fit[+]>   #>  3     3 <fit[+]>   #>  4     4 <fit[+]>   #>  5     5 <fit[+]>   #>  6     6 <fit[+]>   #>  7     7 <fit[+]>   #>  8     8 <fit[+]>   #>  9     9 <fit[+]>   #> 10    10 <fit[+]>   #> 11    11 <fit[+]>   #> 12    12 <fit[+]>   #> 13    13 <fit[+]>   #> 14    14 <fit[+]>   #> 15    15 <fit[+]>   #> 16    16 <fit[+]>   #> 17    17 <fit[+]>   #> 18    18 <fit[+]>   #> 19    19 <fit[+]>   #> 20    20 <fit[+]> predict(model_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1 44.1  #>  2 16.0  #>  3 52.1  #>  4 12.5  #>  5 54.1  #>  6 44.1  #>  7 13.3  #>  8 28.5  #>  9 35.2  #> 10  9.78 #> # … with 250 more rows recipe <- recipe(data_tr, z ~ x + y + a + b + id) %>%   step_nest(id) recipe %>%   prep() %>%   bake(NULL) #> # A tibble: 740 × 6 #>        x      y     a     b     z nest_id #>    <int>  <dbl> <dbl> <dbl> <dbl> <fct>   #>  1    82  100.  25.6  62.0  57.2  Nest 1  #>  2    92   23.4 77.3  99.6   2.71 Nest 1  #>  3    56 -284.  79.8  55.4  17.0  Nest 1  #>  4    57  416.  50.3  33.8  42.5  Nest 1  #>  5    50  313.  40.2  64.9  38.7  Nest 1  #>  6    83  385.  75.7   4.30 67.6  Nest 1  #>  7    72  309.  59.7  26.0  47.2  Nest 1  #>  8    61 -450.  98.1  18.4  11.1  Nest 1  #>  9    70 -131.   3.10 12.6  31.2  Nest 1  #> 10    69 -146.  84.9  83.8  30.7  Nest 1  #> # … with 730 more rows wf <- workflow() %>%   add_model(nested_model) %>%   add_recipe(recipe) wf_fit <- fit(wf, data_tr) predict(wf_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1 44.1  #>  2 16.0  #>  3 52.1  #>  4 12.5  #>  5 54.1  #>  6 44.1  #>  7 13.3  #>  8 28.5  #>  9 35.2  #> 10  9.78 #> # … with 250 more rows augment(wf_fit, data_tst) #> # A tibble: 260 × 8 #>       id   id2     x      y     z     a     b .pred #>    <int> <int> <int>  <dbl> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  239.  36.0  44.7  50.0  44.1  #>  2     1     1    53 -491.   9.51 18.2  -1.66 16.0  #>  3     1     1    54  339.  39.7  83.8  38.8  52.1  #>  4     1     1    55 -486.   9.72 91.7  40.7  12.5  #>  5     1     1    64  474.  36.7  80.6  49.1  54.1  #>  6     1     1    67  490.  37.3  40.2  92.1  44.1  #>  7     1     1    73 -436.  20.2  31.3   5.80 13.3  #>  8     1     2    78   44.4 55.2  87.1  61.1  28.5  #>  9     1     2    81  293.  64.2   2.82 58.2  35.2  #> 10     1     2    84 -275.  43.6  83.0  71.5   9.78 #> # … with 250 more rows tidy(wf_fit) #> # A tibble: 100 × 4 #>    nest_id term        estimate penalty #>    <fct>   <chr>          <dbl>   <dbl> #>  1 Nest 1  (Intercept)  50.5        0.1 #>  2 Nest 1  x            -0.235      0.1 #>  3 Nest 1  y             0.0478     0.1 #>  4 Nest 1  a             0.0596     0.1 #>  5 Nest 1  b            -0.179      0.1 #>  6 Nest 2  (Intercept) -92.5        0.1 #>  7 Nest 2  x             0.725      0.1 #>  8 Nest 2  y             0.0184     0.1 #>  9 Nest 2  a            -0.100      0.1 #> 10 Nest 2  b             0.0366     0.1 #> # … with 90 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"nestedmodels","text":"short vignette, simple example nested model workflow created used dummy data, demonstrate nestedmodels used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ashby Thorpe. Author, maintainer.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorpe (2022). nestedmodels: Tidy Modelling Nested/Panel Data. https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/.","code":"@Manual{,   title = {nestedmodels: Tidy Modelling for Nested/Panel Data},   author = {Ashby Thorpe},   year = {2022},   note = {https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/}, }"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"nestedmodels","dir":"","previous_headings":"","what":"Tidy Modelling for Nested/Panel Data","title":"Tidy Modelling for Nested/Panel Data","text":"goal nestedmodels allow modelling nested data. models accept certain predictors. panel data, often desirable create model panel. nestedmodels enhances ‘tidymodels’ set packages allowing user classify model ‘nested’.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy Modelling for Nested/Panel Data","text":"can install development version nestedmodels like :","code":"# install.packages(\"devtools\") devtools::install_github(\"ashbythorpe/nestedmodels\")"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tidy Modelling for Nested/Panel Data","text":"basic example shows solve common problem:","code":"library(nestedmodels)  data(\"example_nested_data\")  nested_data <- tidyr::nest(example_nested_data, data = -id)  split <- nested_resamples(nested_data, rsample::initial_split())  data_tr <- rsample::training(split) data_tst <- rsample::testing(split)  model <- parsnip::linear_reg() %>%   nested()  fit <- fit(model, z ~ x + y + a + b,             tidyr::nest(data_tr, data = -id))  predict(fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1 38.9  #>  2 11.5  #>  3 34.0  #>  4 33.2  #>  5 25.3  #>  6 26.2  #>  7 42.5  #>  8  8.57 #>  9 34.7  #> 10 49.0  #> # … with 250 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with predictions — augment.nested_model_fit","title":"Augment data with predictions — augment.nested_model_fit","text":"generics::augment() method nested models. augment.nested_model_fit() add column(s) predictions given data.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"# S3 method for nested_model_fit augment(x, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with predictions — augment.nested_model_fit","text":"x nested_model_fit object produced fit.nested_model(). new_data data frame - can nested non-nested. ... Passed onto parsnip::augment.model_fit().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with predictions — augment.nested_model_fit","text":"data frame one added columns predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"data <- dplyr::filter(example_nested_data, id %in% 1:5)  nested_data <- tidyr::nest(data, data = -c(id, id2))  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  fitted <- fit(model, z ~ x + y + a + b, nested_data)  augment(fitted, example_nested_data) #> Warning: Some predictions failed. #> # A tibble: 1,000 × 7 #>        x     y     z     a     b .pred .resid #>    <int> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #>  1    49  239. 36.0   44.7 50.0   31.4  4.55  #>  2    50  313. 38.7   40.2 64.9   32.5  6.22  #>  3    51 -109. 23.4   43.2 38.0   21.7  1.64  #>  4    52  189. 34.2   66.4 61.7   30.6  3.56  #>  5    53 -491.  9.51  18.2 -1.66  12.0 -2.45  #>  6    54  339. 39.7   83.8 38.8   38.6  1.02  #>  7    55 -486.  9.72  91.7 40.7   13.0 -3.29  #>  8    56 -284. 17.0   79.8 55.4   17.7 -0.651 #>  9    57  416. 42.5   50.3 33.8   40.2  2.25  #> 10    58  122. 31.8   25.4 20.5   30.8  0.954 #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example nested data — example_nested_data","title":"Example nested data — example_nested_data","text":"dataset containing example data can nested. Mainly used examples testing.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example nested data — example_nested_data","text":"","code":"example_nested_data"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example nested data — example_nested_data","text":"tibble 1000 rows 7 variables id column can nested, ranging 1 20. id2 Another column can nested, ranging 1 30. x numeric column depends 'id'. y sequential numeric column (added randomness), independent columns. z column dependent id, id2, x y. randomly generated numeric column, ranging 1 100. b randomly generated numeric column, centred around 50.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example nested data — example_nested_data","text":"","code":"example_nested_data #> # A tibble: 1,000 × 7 #>       id   id2     x     y     z     a     b #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  239. 36.0   44.7 50.0  #>  2     1     1    50  313. 38.7   40.2 64.9  #>  3     1     1    51 -109. 23.4   43.2 38.0  #>  4     1     1    52  189. 34.2   66.4 61.7  #>  5     1     1    53 -491.  9.51  18.2 -1.66 #>  6     1     1    54  339. 39.7   83.8 38.8  #>  7     1     1    55 -486.  9.72  91.7 40.7  #>  8     1     1    56 -284. 17.0   79.8 55.4  #>  9     1     1    57  416. 42.5   50.3 33.8  #> 10     1     1    58  122. 31.8   25.4 20.5  #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the inner model of a nested model object — extract_inner_model","title":"Get the inner model of a nested model object — extract_inner_model","text":"Extract inner model nested_model object, workflow containing nested model.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the inner model of a nested model object — extract_inner_model","text":"","code":"extract_inner_model(x, ...)  # S3 method for default extract_inner_model(x, ...)  # S3 method for nested_model extract_inner_model(x, ...)  # S3 method for workflow extract_inner_model(x, ...)  # S3 method for model_spec extract_inner_model(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the inner model of a nested model object — extract_inner_model","text":"x model spec workflow. ... used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the inner model of a nested model object — extract_inner_model","text":"model_spec object","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the inner model of a nested model object — extract_inner_model","text":"","code":"model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  extract_inner_model(model) #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nested model to a dataset — fit.nested_model","title":"Fit a nested model to a dataset — fit.nested_model","text":"fit.model_spec() takes nested model specification fits inner model specification nested data frame given dataset.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nested model to a dataset — fit.nested_model","text":"","code":"# S3 method for nested_model fit(   object,   formula,   data,   case_weights = NULL,   control = parsnip::control_parsnip(),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nested model to a dataset — fit.nested_model","text":"object object class nested_model. formula object class formula. Passed parsnip::fit.model_spec(). contain variable nest . data data frame. used 'nested_model' object, data frame must already nested. case_weights optional vector case weights. Passed parsnip::fit.model_spec(). control parsnip::control_parsnip() object. Passed parsnip::fit.model_spec(). ... Passed parsnip::fit.model_spec(). Currently unused.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a nested model to a dataset — fit.nested_model","text":"nested_model_fit object several elements: spec: model specification object (inner model nested model object) fit: tibble containing model fits nests correspond . inner_names: character vector names, used help nesting data predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a nested model to a dataset — fit.nested_model","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -id)  fit(model, z ~ x + y + a + b, nested_data) #> Nested model fit, with 20 inner models #> # A tibble: 20 × 2 #>       id .model_fit #>    <int> <list>     #>  1     1 <fit[+]>   #>  2     2 <fit[+]>   #>  3     3 <fit[+]>   #>  4     4 <fit[+]>   #>  5     5 <fit[+]>   #>  6     6 <fit[+]>   #>  7     7 <fit[+]>   #>  8     8 <fit[+]>   #>  9     9 <fit[+]>   #> 10    10 <fit[+]>   #> 11    11 <fit[+]>   #> 12    12 <fit[+]>   #> 13    13 <fit[+]>   #> 14    14 <fit[+]>   #> 15    15 <fit[+]>   #> 16    16 <fit[+]>   #> 17    17 <fit[+]>   #> 18    18 <fit[+]>   #> 19    19 <fit[+]>   #> 20    20 <fit[+]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"generics::fit_xy() method nested models. called directly instead called workflows::fit.workflow().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"","code":"# S3 method for nested_model fit_xy(   object,   x,   y,   case_weights = NULL,   control = parsnip::control_parsnip(),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"object object class nested_model. x data frame predictors. y data frame outcome data. case_weights optional vector case weights. Passed parsnip::fit.model_spec(). control parsnip::control_parsnip() object. Passed parsnip::fit.model_spec(). ... Passed parsnip::fit.model_spec(). Currently unused.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"nested_model_fit object several elements: spec: model specification object (inner model nested model object) fit: tibble containing model fits nests correspond . inner_names: character vector names, used help nesting data predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"","code":"data <- dplyr::filter(example_nested_data, id %in% 11:20)  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  recipe <- recipes::recipe(data, z ~ x + y + id) %>%   step_nest(id)  wf <- workflows::workflow() %>%   workflows::add_recipe(recipe) %>%   workflows::add_model(model)  fit(wf, data) #> ══ Workflow [trained] ══════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: nested_model() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 1 Recipe Step #>  #> • step_nest() #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> # A tibble: 10 × 2 #>    nest_id .model_fit #>    <fct>   <list>     #>  1 Nest 1  <fit[+]>   #>  2 Nest 2  <fit[+]>   #>  3 Nest 3  <fit[+]>   #>  4 Nest 4  <fit[+]>   #>  5 Nest 5  <fit[+]>   #>  6 Nest 6  <fit[+]>   #>  7 Nest 7  <fit[+]>   #>  8 Nest 8  <fit[+]>   #>  9 Nest 9  <fit[+]>   #> 10 Nest 10 <fit[+]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"parsnip::multi_predict() method nested models. Allows predictions made sub-models model object.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"","code":"# S3 method for nested_model_fit multi_predict(object, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"object nested_model_fit object produced fit.nested_model(). new_data data frame - can nested non-nested. ... Passed onto parsnip::multi_predict()","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"tibble number rows new_data, unnested.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"","code":"data <- dplyr::filter(example_nested_data, id %in% 16:20)  nested_data <- tidyr::nest(data, data = -id2)  model <- parsnip::linear_reg(penalty = 1) %>%   parsnip::set_engine(\"glmnet\") %>%   nested()  fitted <- fit(model, z ~ x + y + a + b, nested_data)  parsnip::multi_predict(fitted, example_nested_data,                        penalty = c(0.1, 0.2, 0.3)) #> Warning: Some predictions failed. #> # A tibble: 1,000 × 1 #>    .pred            #>    <list>           #>  1 <tibble [3 × 2]> #>  2 <tibble [3 × 2]> #>  3 <tibble [3 × 2]> #>  4 <tibble [3 × 2]> #>  5 <tibble [3 × 2]> #>  6 <tibble [3 × 2]> #>  7 <tibble [3 × 2]> #>  8 <tibble [3 × 2]> #>  9 <tibble [3 × 2]> #> 10 <tibble [3 × 2]> #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Nested Model — nested","title":"Create a Nested Model — nested","text":"nested() turns model workflow nested model/workflow. is_nested() checks model workflow nested.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Nested Model — nested","text":"","code":"nested(x, ...)  # S3 method for default nested(x, ...)  # S3 method for model_spec nested(x, ...)  # S3 method for nested_model nested(x, ...)  # S3 method for workflow nested(x, ...)  is_nested(x, ...)  # S3 method for default is_nested(x, ...)  # S3 method for model_spec is_nested(x, ...)  # S3 method for workflow is_nested(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Nested Model — nested","text":"x model specification workflow. ... currently used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Nested Model — nested","text":"nested model object, workflow containing nested model. is_nested(), logical vector length 1.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Nested Model — nested","text":"","code":"model <-   parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  model #> Nested Model Specification #>  #> Inner model: #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>   is_nested(model) #> [1] TRUE  wf <- workflows::workflow() %>%   workflows::add_model(model)  is_nested(wf) #> [1] TRUE"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Create splits with nested data — nested_resamples","title":"Create splits with nested data — nested_resamples","text":"Use 'rsample' split function nested data, nests act strata. almost guarantees every split contain data every nested data frame.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create splits with nested data — nested_resamples","text":"","code":"nested_resamples(   data,   resamples,   nesting_method = NULL,   size_action = c(\"truncate\", \"recycle\", \"recycle-random\", \"combine\", \"combine-random\",     \"combine-end\", \"error\"),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create splits with nested data — nested_resamples","text":"data data frame. resamples expression, function, formula string can evaluated produce rset rsplit object. nesting_method recipe, workflow NULL, used nest data data already nested (see Details). size_action different numbers splits produced nest, sizes matched (see Details)? ... Extra arguments pass resamples.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create splits with nested data — nested_resamples","text":"Either rsplit object rset object, depending resamples.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create splits with nested data — nested_resamples","text":"function breaks data frame smaller, nested data frames. Resampling performed within nests, results combined together end. ensures split contains data every nest. However, function perform pooling (unlike rsample::make_strata()), may run issues nest small.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"nesting-data","dir":"Reference","previous_headings":"","what":"Nesting Data","title":"Create splits with nested data — nested_resamples","text":"data can nested several ways: nesting_method NULL data grouped (using dplyr::group_by()), data nested (see tidyr::nest()) works). data grouped, assumed already nested, nested_resamples try find column contains nested data frames. nesting_method workflow recipe, recipe step created using  step_nest(), data nested using step recipe. convenient already created recipe workflow, saves line code.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"resample-evaluation","dir":"Reference","previous_headings":"","what":"Resample Evaluation","title":"Create splits with nested data — nested_resamples","text":"resamples argument can take many forms: function call, vfold_cv(v = 5). similar format rsample::nested_cv(). function, rsample::vfold_cv. purrr-style anonymous function, converted function using rlang::as_function(). string, evaluated using rlang::exec(). Every method evaluated data passed first argument function (name 'data').","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"size-matching","dir":"Reference","previous_headings":"","what":"Size Matching","title":"Create splits with nested data — nested_resamples","text":"set resamples created nest can combined, must contain number splits. resampling methods, issue. rsample::vfold_cv(), example, reliably creates number splits defined v argument. However, resampling methods, like rsample::rolling_origin(), depend size data argument, therefore may produce different numbers resamples presented differently sized nests. size_action argument defines many ways matching sizes rsets different numbers splits. methods either try reduce number splits set set length set lowest number splits; opposite, set number splits largest set. \"truncate\", default, means splits beyond required length removed. \"recycle\" means sets splits extended repeating elements required length reached, mimicking process vector recycling. advantage method created splits preserved. \"recycle-random\" similar process recycling, splits copied random spaces output, may important order resamples matters. process completely random, program makes sure every split copied roughly number times. \"combine\" gets rid excess splits combining previous ones. means training testing rows merged one split. Combining done systematically: set splits needs compacted set 5, first split combined sixth split, eleventh, sixteenth, etc. approach recommended, since clear benefit combined split . \"combine-random\" combines split random set splits, instead systematic process described previous method. , process actually random, split combined roughly number splits. \"combine-end\" combines every excess split last non-excess split. \"error\" throws error nest produce number splits.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create splits with nested data — nested_resamples","text":"","code":"nested_data <- example_nested_data %>%   tidyr::nest(data = -id)  grouped_data <- example_nested_data %>%   dplyr::group_by(id)  recipe <- recipes::recipe(example_nested_data, z ~ .) %>%   step_nest(id)  wf <- workflows::workflow() %>%   workflows::add_recipe(recipe)  nested_resamples(nested_data, rsample::vfold_cv()) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits            id     #>    <list>            <chr>  #>  1 <split [900/100]> Fold01 #>  2 <split [900/100]> Fold02 #>  3 <split [900/100]> Fold03 #>  4 <split [900/100]> Fold04 #>  5 <split [900/100]> Fold05 #>  6 <split [900/100]> Fold06 #>  7 <split [900/100]> Fold07 #>  8 <split [900/100]> Fold08 #>  9 <split [900/100]> Fold09 #> 10 <split [900/100]> Fold10  nested_resamples(   dplyr::group_by(example_nested_data, id),   ~ rsample::initial_split(.) ) #> <Training/Testing/Total> #> <740/260/1000>  nested_resamples(example_nested_data, ~ {   rsample::validation_split(.) }, nesting_method = recipe) #> # Validation Set Split (0.75/0.25)   #> # A tibble: 1 × 2 #>   splits            id         #>   <list>            <chr>      #> 1 <split [740/260]> validation  nested_resamples(example_nested_data, rsample::bootstraps,   times = 25, nesting_method = wf ) #> # Bootstrap sampling  #> # A tibble: 25 × 2 #>    splits             id          #>    <list>             <chr>       #>  1 <split [1000/370]> Bootstrap01 #>  2 <split [1000/371]> Bootstrap02 #>  3 <split [1000/357]> Bootstrap03 #>  4 <split [1000/350]> Bootstrap04 #>  5 <split [1000/355]> Bootstrap05 #>  6 <split [1000/356]> Bootstrap06 #>  7 <split [1000/375]> Bootstrap07 #>  8 <split [1000/375]> Bootstrap08 #>  9 <split [1000/372]> Bootstrap09 #> 10 <split [1000/373]> Bootstrap10 #> # … with 15 more rows  # nested nested resamples  nested_resamples(nested_data, rsample::nested_cv(   rsample::vfold_cv(),   rsample::bootstraps() )) #> # Nested resampling: #> #  outer: 10-fold cross-validation #> #  inner: Bootstrap sampling #> # A tibble: 10 × 3 #>    splits            id     inner_resamples       #>    <list>            <chr>  <list>                #>  1 <split [900/100]> Fold01 <bootstraps [25 × 2]> #>  2 <split [900/100]> Fold02 <bootstraps [25 × 2]> #>  3 <split [900/100]> Fold03 <bootstraps [25 × 2]> #>  4 <split [900/100]> Fold04 <bootstraps [25 × 2]> #>  5 <split [900/100]> Fold05 <bootstraps [25 × 2]> #>  6 <split [900/100]> Fold06 <bootstraps [25 × 2]> #>  7 <split [900/100]> Fold07 <bootstraps [25 × 2]> #>  8 <split [900/100]> Fold08 <bootstraps [25 × 2]> #>  9 <split [900/100]> Fold09 <bootstraps [25 × 2]> #> 10 <split [900/100]> Fold10 <bootstraps [25 × 2]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nestedmodels-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nestedmodels: Tidy Modelling for Nested/Panel Data — nestedmodels-package","title":"nestedmodels: Tidy Modelling for Nested/Panel Data — nestedmodels-package","text":"goal 'nestedmodels' allow modelling nested data. models accept certain predictors. panel data, often desirable create model panel. 'nestedmodels' enhances 'tidymodels' set packages allowing user classify model workflow 'nested'.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nestedmodels-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nestedmodels: Tidy Modelling for Nested/Panel Data — nestedmodels-package","text":"Maintainer: Ashby Thorpe ashbythorpe@gmail.com (ORCID)","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested Model Predictions — predict.nested_model_fit","title":"Nested Model Predictions — predict.nested_model_fit","text":"Apply fitted nested model generate different types predictions. stats::predict()/parsnip::predict_raw() methods nested model fits.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested Model Predictions — predict.nested_model_fit","text":"","code":"# S3 method for nested_model_fit predict(object, new_data, type = NULL, opts = list(), ...)  # S3 method for nested_model_fit predict_raw(object, new_data, opts = list(), ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested Model Predictions — predict.nested_model_fit","text":"object nested_model_fit object produced fit.nested_model(). new_data data frame make predictions . Can nested non-nested. type singular character vector NULL. Passed parsnip::predict.model_fit(). opts list optional arguments. Passed parsnip::predict.model_fit(). ... Arguments underlying model's predict function. Passed parsnip::predict.model_fit().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested Model Predictions — predict.nested_model_fit","text":"data frame model predictions. predict_raw(), matrix, data frame, vector list.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested Model Predictions — predict.nested_model_fit","text":"","code":"data <- dplyr::filter(example_nested_data, id %in% 5:15)  nested_data <- tidyr::nest(data, data = -id)  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  fitted <- fit(model, z ~ x + y + a + b, nested_data)  predict(fitted, example_nested_data) #> Warning: Some predictions failed. #> # A tibble: 1,000 × 1 #>    .pred #>    <dbl> #>  1    NA #>  2    NA #>  3    NA #>  4    NA #>  5    NA #>  6    NA #>  7    NA #>  8    NA #>  9    NA #> 10    NA #> # … with 990 more rows  parsnip::predict_raw(fitted, example_nested_data) #> Warning: Some predictions failed. #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                   1           2           3           4  #>          NA          NA  33.3065773  24.7620373  43.2624581  18.9262183  #>           5           6           7           8           9          10  #>  60.2647586  56.0268842  31.1253397  53.1348487  37.2334655  44.9241278  #>          11          12          13          14          15          16  #>  28.0952395  47.2029126  28.7333740  38.3950686  45.8788597  47.8754133  #>          17          18          19          20          21          22  #>  30.6515195  21.9890390  48.5046962  56.3206421  27.2795781  32.5686352  #>          23          24          25          26          27          28  #>  34.0191678  33.6472412  18.1619991  53.8442729  18.9959088  46.1668309  #>          29          30          31          32          33          34  #>  48.4148226  40.3343938  40.2658609  33.9263911  26.3005531  49.5664500  #>          35          36          37          38          39          40  #>  37.5110800  33.4133072  52.2389254  38.5634538  48.1252789  64.6035896  #>          41          42          43          44          45          46  #>  33.1697594  49.7999266  47.0025362  21.4824173  56.3641812  39.4774539  #>          47          48          49          50           1           2  #>  36.7360736  38.8919757  37.0018386  37.6031691  59.0295250  44.8994828  #>           3           4           5           6           7           8  #>  50.6519751  76.7755224  55.0632241  48.6188745  57.7524306  43.1701141  #>           9          10          11          12          13          14  #>  52.3749784  41.5481117  70.4775199  65.0918205  47.4668345  51.7257662  #>          15          16          17          18          19          20  #>  49.0663545  38.1910078  60.6336231  55.9260771  39.1983789  34.9499925  #>          21          22          23          24          25          26  #>  50.7786441  48.2806464  34.5695373  42.5038069  61.5376995  62.8319178  #>          27          28          29          30          31          32  #>  43.7389803  33.3502034  39.9492054  38.7206005  31.4815988  61.6917482  #>          33          34          35          36          37          38  #>  42.9619793  27.9796051  31.4241175  56.4190798  33.1008487  47.3847617  #>          39          40          41          42          43          44  #>  52.6333765  57.4920416  35.7433417  33.7102625  26.4410536  29.1478490  #>          45          46          47          48          49          50  #>  39.0671683  52.0753771  29.3990388  46.2637102  41.3715579  43.3426348  #>           1           2           3           4           5           6  #>  59.9440307  30.5219322  29.0728598  42.6778637  45.0926690  42.1069933  #>           7           8           9          10          11          12  #>  40.0669766  32.8397346  50.8062525  34.1049483  34.6545181  23.4731743  #>          13          14          15          16          17          18  #>  48.6534636  29.6538786  23.6109051  17.9771545  50.3537325  28.8613261  #>          19          20          21          22          23          24  #>  43.2803310  43.2437743  26.2747507  32.3492240  16.6260273  17.5643168  #>          25          26          27          28          29          30  #>  36.2681649  26.2752893  33.7607998  39.6093052  24.5291618  21.8566696  #>          31          32          33          34          35          36  #>  23.7706643  29.4910375  13.1497983  37.9927051  24.9802792  24.6861851  #>          37          38          39          40          41          42  #>  20.6445450  35.0934951  18.7228706  10.7056810   4.4606920   9.5724145  #>          43          44          45          46          47          48  #>  23.2435486   6.9336153  23.0083933  29.8815239   3.1876055   3.5136803  #>          49          50           1           2           3           4  #>  -2.6593266  19.9084473  -2.3009457  -1.6417598  -5.8512641 -12.7777749  #>           5           6           7           8           9          10  #>   9.2397230  15.9546670 -12.5126283  21.5553967 -10.2943995 -10.9816285  #>          11          12          13          14          15          16  #>  26.5447035  10.9575802  24.6331274   7.4487425  20.2677677  16.4900480  #>          17          18          19          20          21          22  #>  36.4575796  31.9388046  30.0408001  11.1918517   4.5861173  27.0033854  #>          23          24          25          26          27          28  #>  37.0631389  26.1748917  50.9112993  22.0784264  52.3318021  32.5778812  #>          29          30          31          32          33          34  #>  20.4058274  35.5350452  29.3769441  42.3083964  35.1540876  52.4933305  #>          35          36          37          38          39          40  #>  36.2468372  36.1547538  35.4543211  58.2767345  50.6683250  34.0311421  #>          41          42          43          44          45          46  #>  32.9095056  54.8262191  72.4122650  66.8042503  61.9383721  40.1968827  #>          47          48          49          50           1           2  #>  70.8391542  59.6926739  67.4675513  64.7569495  13.0514159  17.2801825  #>           3           4           5           6           7           8  #>   9.1252748  -4.0940825  32.7294038  -9.8706069  11.6399546   5.7256752  #>           9          10          11          12          13          14  #>  -4.8040079  10.6475531  20.5263899  33.2044151   8.6732008  28.3485091  #>          15          16          17          18          19          20  #>  10.4477473  12.9311876   4.0707826  31.7593389  29.2791371   1.4507387  #>          21          22          23          24          25          26  #>  10.1306792  19.0368614  28.1429718  32.6152476  20.7900640   8.8994227  #>          27          28          29          30          31          32  #>  13.0968589  27.1732713  33.9472704  42.2176605  14.8046060  14.2548275  #>          33          34          35          36          37          38  #>  38.8481571   7.2450902   9.2593697  27.5694512  21.7251663  11.0278516  #>          39          40          41          42          43          44  #>  26.3409974  40.3076736  25.0044318  13.4846318  48.3546453  43.6195029  #>          45          46          47          48          49          50  #>  27.7312408  38.1940309  42.8506038  50.5596484  23.1851116  42.6566356  #>           1           2           3           4           5           6  #>  50.8971594  55.0141485  69.0161797  45.3405727  65.2848816  54.7787506  #>           7           8           9          10          11          12  #>  63.5374593  46.2607550  42.7094134  36.5703029  60.4381053  49.6226649  #>          13          14          15          16          17          18  #>  58.9764001  41.7628443  45.2819854  40.0591217  63.8884354  35.2843980  #>          19          20          21          22          23          24  #>  35.2178147  34.0566783  32.6948301  36.4581612  45.5094563  54.5984737  #>          25          26          27          28          29          30  #>  33.7513174  56.4479610  46.6783433  24.8068081  57.6938299  35.3763888  #>          31          32          33          34          35          36  #>  21.3917036  45.7698551  23.9847462  35.4225609  39.0165407  31.7958209  #>          37          38          39          40          41          42  #>  22.8510812  29.3870161  31.5803229  35.0883189  38.5415304  53.3093137  #>          43          44          45          46          47          48  #>  45.7151486  21.9358817  31.8889075  35.3610923  10.2930639  41.1844902  #>          49          50           1           2           3           4  #>  29.8384306  15.5867966  77.7869086  48.4958039  71.8581526  67.5921403  #>           5           6           7           8           9          10  #>  58.6250344  48.1782363  41.4790997  63.7573564  63.2770272  54.9349135  #>          11          12          13          14          15          16  #>  74.6829753  81.5382333  67.3358446  50.9653396  66.2292757  76.7182679  #>          17          18          19          20          21          22  #>  71.3182110  52.7892771  59.9305333  57.6907899  82.3446048  56.4616281  #>          23          24          25          26          27          28  #>  73.4331746  52.2660512  49.8675075  51.7221464  84.5818998  59.9211481  #>          29          30          31          32          33          34  #>  83.7168098  78.0693946  75.3552861  58.0968025  52.3014999  52.2458491  #>          35          36          37          38          39          40  #>  58.7409587  65.1166905  79.5173481  59.5145980  71.0879971  78.2599423  #>          41          42          43          44          45          46  #>  76.8738031  59.0593684  89.6800122  51.8530966  58.4149232  75.2149500  #>          47          48          49          50           1           2  #>  50.8258917  51.0565967  77.0513076  74.4165257  27.9039567  60.2862278  #>           3           4           5           6           7           8  #>  41.2623660  51.5750108  26.0409449  42.3281327  63.6282210  61.2092240  #>           9          10          11          12          13          14  #>  37.7306628  52.0266997  30.1274183  58.2387698  39.6058667  57.4718133  #>          15          16          17          18          19          20  #>  54.6850945  34.2889348  40.0126796  39.1836366  23.3934787  50.1905660  #>          21          22          23          24          25          26  #>  41.6049675  32.6800842  53.3950783  33.7267923  41.0660253  35.7861264  #>          27          28          29          30          31          32  #>  63.1657679  31.2366207  44.2727297  48.2847916  40.0161545  52.6572861  #>          33          34          35          36          37          38  #>  59.2361043  38.1771444  64.4244034  69.0476505  32.5748826  35.0931412  #>          39          40          41          42          43          44  #>  50.8879689  45.5761911  46.5969707  48.9042203  40.8223553  60.6106913  #>          45          46          47          48          49          50  #>  31.9048645  60.2673778  38.2371882  49.5720565  66.5642683  47.9391370  #>           1           2           3           4           5           6  #>   7.7648758  -0.2081025   0.5814417   1.9410040  20.6140719  31.4854533  #>           7           8           9          10          11          12  #>  -5.9975127  20.8703172  41.4256217  30.5326830   7.6085786  -2.0935860  #>          13          14          15          16          17          18  #>  25.9803742  41.8295535  21.0188980  32.1492828  21.7454145  13.4527964  #>          19          20          21          22          23          24  #>  49.8254950  48.1063621   4.4846204  50.3880265  44.5812584  34.8531005  #>          25          26          27          28          29          30  #>  25.3835110  22.1891365   6.5061791  -0.1840998  23.5870769  13.6572970  #>          31          32          33          34          35          36  #>  41.2892096  49.6895531  16.5581697  46.7799204   9.4811034  42.1267933  #>          37          38          39          40          41          42  #>  30.0265026  22.3538553  48.0105543  15.7868900  25.4890283  45.9110749  #>          43          44          45          46          47          48  #>   2.7728319  23.5028685   3.8481426   8.7048329  12.3862006  16.7548388  #>          49          50           1           2           3           4  #>  18.5766507  22.9438565  31.5934567  51.2979420  41.8666446  52.2824787  #>           5           6           7           8           9          10  #>  31.9517409  50.4591146  21.4638869  16.0661870  56.4386485  47.7073262  #>          11          12          13          14          15          16  #>  50.3013679  28.7953621  69.5718249  69.3172972  28.0947880  64.9626507  #>          17          18          19          20          21          22  #>  57.5522501  74.8887043  78.2532460  56.0728205  76.1478566  54.9294273  #>          23          24          25          26          27          28  #>  51.7612583  77.6691720  81.0911586  81.3537560  53.0610728  57.6990894  #>          29          30          31          32          33          34  #>  60.5825739  73.7953857  89.8369749  90.0898688  77.1151339  89.0258967  #>          35          36          37          38          39          40  #>  91.3139105  98.6594922  81.3700840  77.5598876  65.2002491  93.5915719  #>          41          42          43          44          45          46  #>  79.8811665 102.3770084  80.2855332  84.7822683  86.2447878 113.7321867  #>          47          48          49          50           1           2  #>  93.4274727 104.1919930  98.8462952 107.5726576  40.9030812  61.0579494  #>           3           4           5           6           7           8  #>  62.1825388  60.7342887  39.1902059  44.5927218  48.8294498  50.8588589  #>           9          10          11          12          13          14  #>  53.2076395  57.4982444  66.8169185  54.3532386  50.4574679  66.2771866  #>          15          16          17          18          19          20  #>  60.5518050  54.7376428  39.6617850  63.8937059  68.1171994  54.1263916  #>          21          22          23          24          25          26  #>  49.6355659  49.0929061  58.9996745  49.5800499  50.0730645  51.0257390  #>          27          28          29          30          31          32  #>  63.0767035  51.5028214  73.9777794  74.3422576  69.4963667  71.3782103  #>          33          34          35          36          37          38  #>  51.0882777  54.1873325  68.4957682  64.9667178  74.2362878  61.0751767  #>          39          40          41          42          43          44  #>  65.3503267  71.9286832  66.7803220  53.4907371  65.3313135  57.2119568  #>          45          46          47          48          49          50  #>  71.6809552  59.5426631  77.5294791  83.4303298  73.1878255  87.8479743  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                  #>          NA          NA          NA          NA"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment, fit, fit_xy, glance, tidy","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest transformation — step_nest","title":"Nest transformation — step_nest","text":"step_nest() creates specification recipe step convert specified data single model term, specifying 'nest' row dataset corresponds .","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest transformation — step_nest","text":"","code":"step_nest(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   names = NULL,   lookup_table = NULL,   skip = FALSE,   id = recipes::rand_id(\"nest\") )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest transformation — step_nest","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables. step_nest, indicates variables nested. See recipes::selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. names names variables selected ... stored preprocessing step trained recipes::prep(). lookup_table table describing values selected columns correspond 'nest_id' stored preprocessing step trained recipes::prep(). skip logical. step skipped recipe baked recipes::bake()? operations baked recipes::prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nest transformation — step_nest","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nest transformation — step_nest","text":"step_nest() create single nominal variable (named 'nest_id') set variables (type). Every unique combination specified columns receive single nest id. recipe step designed use nested models, since model fitted data corresponding nest id. Using recipe often easier reliable nesting data manually. nest id corresponding unique combination column values decided recipe prepped (recipe contained workflow, happens workflow fitted). means using prepped recipe new data (using recipes::prep() workflows::predict.workflow()), unique combinations nesting columns must also exist training data. warned case. using 'rsample' package create splits presents issue, may want consider using nested_resamples(). step_nest() designed nesting transformed data 'nest_id' column equivalent following action non-transformed data:","code":"data %>%   dplyr::group_by(...) %>% # '...' represents your specified terms   tidyr::nest()"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest transformation — step_nest","text":"","code":"recipe <- recipes::recipe(example_nested_data, z ~ x + id) %>%   step_nest(id)  recipe %>%   recipes::prep() %>%   recipes::bake(NULL) #> # A tibble: 1,000 × 3 #>        x     z nest_id #>    <int> <dbl> <fct>   #>  1    49 36.0  Nest 1  #>  2    50 38.7  Nest 1  #>  3    51 23.4  Nest 1  #>  4    52 34.2  Nest 1  #>  5    53  9.51 Nest 1  #>  6    54 39.7  Nest 1  #>  7    55  9.72 Nest 1  #>  8    56 17.0  Nest 1  #>  9    57 42.5  Nest 1  #> 10    58 31.8  Nest 1  #> # … with 990 more rows  recipe2 <- recipes::recipe(example_nested_data, z ~ x + id) %>%   step_nest(-c(x, z))  recipe %>%   recipes::prep() %>%   recipes::bake(NULL) #> # A tibble: 1,000 × 3 #>        x     z nest_id #>    <int> <dbl> <fct>   #>  1    49 36.0  Nest 1  #>  2    50 38.7  Nest 1  #>  3    51 23.4  Nest 1  #>  4    52 34.2  Nest 1  #>  5    53  9.51 Nest 1  #>  6    54 39.7  Nest 1  #>  7    55  9.72 Nest 1  #>  8    56 17.0  Nest 1  #>  9    57 42.5  Nest 1  #> 10    58 31.8  Nest 1  #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"Use 'broom' functions fitted nested models. tidy.nested_model_fit() summarises components model within nested model fit, indicating nested data frame row corresponds . glance.nested_model_fit() summarises nested model, returning tibble::tibble() 1 row. glance_nested() summarises model within nested model fit, returning tibble::tibble() number rows number inner models.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"","code":"# S3 method for nested_model_fit tidy(x, ...)  # S3 method for nested_model_fit glance(x, ...)  glance_nested(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"x object converted tidy tibble::tibble(). ... Additional arguments passed respective functions. (e.g. tidy.nested_model_fit(), parsnip::tidy.model_fit()).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"tibble::tibble(). glance.nested_model_fit(), tibble 1 row.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"generics::glance() states glance() methods always return 1 row outputs non-empty inputs. 'nestedmodels' package exception: glance() methods combine rows produce result single row. Specifically: column contains 1 unique value, value used. column numeric, mean calculated. Otherwise, results combined list.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"","code":"if (require(\"broom\")) {   data <- dplyr::filter(example_nested_data, id %in% 1:5)    model <- parsnip::linear_reg() %>%     parsnip::set_engine(\"lm\") %>%     nested()    fit <- fit(     model, z ~ x + y + a + b,     dplyr::group_by(data, id)   )    tidy(fit)   glance(fit)   glance_nested(fit) } #> Loading required package: broom #> # A tibble: 5 × 13 #>      id r.squared adj.r…¹ sigma stati…² p.value    df logLik   AIC   BIC devia…³ #>   <int>     <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl> #> 1     1     0.453   0.404 18.0     9.31 1.43e-5     4  -213.  438.  449.  14617. #> 2     2     0.499   0.454 15.3    11.2  2.18e-6     4  -205.  421.  433.  10476. #> 3     3     0.456   0.408 12.9     9.44 1.25e-5     4  -196.  404.  416.   7477. #> 4     4     0.594   0.558  7.25   16.5  2.23e-8     4  -167.  347.  358.   2368. #> 5     5     0.293   0.230 18.5     4.65 3.15e-3     4  -214.  440.  452.  15397. #> # … with 2 more variables: df.residual <int>, nobs <int>, and abbreviated #> #   variable names ¹​adj.r.squared, ²​statistic, ³​deviance"}]
