[{"path":"https://ashbythorpe.github.io/nestedmodels/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 nestedmodels authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"what-is-the-alternative","dir":"Articles","previous_headings":"","what":"What is the alternative?","title":"nestedmodels-limitations","text":"datasets, issues problematic ignore. cases, alternative approach obvious: just use non-nested model. ‘recipes’ package many methods dealing categorical data, models likely give promising results. However, models, notably forecasting algorithms, nestedmodels can seem like solution forecasting panel data. specific case, global forecasting method recommended (e.g. ‘Prophet’ gradient boosting model), since can deal categorical data. generally, means nested normal approach work model, often means best route action abandon said model, find one suit needs effectively.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"nestedmodels-limitations","text":"vignette, discussed conditions reasons nested modelling best approach every situation, respond case.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"what-is-nestedmodels","dir":"Articles","previous_headings":"","what":"What is nestedmodels?","title":"nestedmodels","text":"nestedmodels extension ‘tidymodels’ framework. allows models workflows used nested data. provides alternative ‘modeltime’’s approach nested modelling ‘multilevelmod’ package, allowing model workflow used nested data easily.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"why-do-i-need-nestedmodels","dir":"Articles","previous_headings":"","what":"Why do I need nestedmodels?","title":"nestedmodels","text":"best example may need use nestedmodels package working panel data. set time series, describing different object (historic prices set stocks, example), may want model time series separately, especially considering fact many time series modelling tools work well non-date predictors (furthermore, many models accept non-numeric predictors, although often better ways deal problem; see recipes::step_dummy()). scenario, nested modelling often best solution.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"how-does-nestedmodels-work","dir":"Articles","previous_headings":"","what":"How does nestedmodels work?","title":"nestedmodels","text":"implementation nestedmodels simple. Fitting nested model fits model nested value (time series set stocks, model fitted stock). correct model selected used making predictions.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"a-quick-example","dir":"Articles","previous_headings":"","what":"A quick example","title":"nestedmodels","text":"vignette, ’re going explore basic example nested model. ’re going need following packages: ’re going use example data included ‘nestedmodels’ package. data simple, serves example data can nested, rather representing anything concrete. data can nested following way: Lets split data training testing set using nested_resamples() function. ensures training testing set contain data every ‘id’ value. Now let’s define model: Since ’re fitting model nested data, need way make model ‘nested’. simple nested() function. can fit model usual way. Note data must nested, formula include id column. Predicting can also done usual way (data predict can nested non-nested). Since just demonstration, use data model fitted . method fine, nest data pain. can solve using workflow. first define recipe, define step used nest data. time, formula can include ‘id’ column, since recipe needs act . little easier nesting data manually. Note recipe actually nest data, instead removes specified columns adds new column, ‘nest_id’, specifies nest row belongs . Now create workflow, combining recipe model. workflow can fitted way model, note since used step_nest() data nested. fit object can used make predictions. common parsnip functions can also used fitted nested models: really need know use nestedmodels package. models workflows can compared, fitted tuned much way normal models workflows - can even combine normal models using ‘workflowsets’ ‘stacks’ packages.","code":"data(\"example_nested_data\") data <- example_nested_data data #> # A tibble: 1,000 × 7 #>       id   id2     x     y     z     a     b #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  239. 36.0   44.7 50.0  #>  2     1     1    50  313. 38.7   40.2 64.9  #>  3     1     1    51 -109. 23.4   43.2 38.0  #>  4     1     1    52  189. 34.2   66.4 61.7  #>  5     1     1    53 -491.  9.51  18.2 -1.66 #>  6     1     1    54  339. 39.7   83.8 38.8  #>  7     1     1    55 -486.  9.72  91.7 40.7  #>  8     1     1    56 -284. 17.0   79.8 55.4  #>  9     1     1    57  416. 42.5   50.3 33.8  #> 10     1     1    58  122. 31.8   25.4 20.5  #> # … with 990 more rows nested_data <- nest(data, data = -id) nested_data #> # A tibble: 20 × 2 #>       id data              #>    <int> <list>            #>  1     1 <tibble [50 × 6]> #>  2     2 <tibble [50 × 6]> #>  3     3 <tibble [50 × 6]> #>  4     4 <tibble [50 × 6]> #>  5     5 <tibble [50 × 6]> #>  6     6 <tibble [50 × 6]> #>  7     7 <tibble [50 × 6]> #>  8     8 <tibble [50 × 6]> #>  9     9 <tibble [50 × 6]> #> 10    10 <tibble [50 × 6]> #> 11    11 <tibble [50 × 6]> #> 12    12 <tibble [50 × 6]> #> 13    13 <tibble [50 × 6]> #> 14    14 <tibble [50 × 6]> #> 15    15 <tibble [50 × 6]> #> 16    16 <tibble [50 × 6]> #> 17    17 <tibble [50 × 6]> #> 18    18 <tibble [50 × 6]> #> 19    19 <tibble [50 × 6]> #> 20    20 <tibble [50 × 6]> split <- nested_resamples(nested_data, rsample::initial_split()) data_tr <- rsample::training(split) data_tst <- rsample::testing(split) model <- linear_reg(penalty = 0.1) %>%   set_engine(\"glmnet\") nested_model <- model %>%   nested() nested_model #> Nested Model Specification #>  #> Inner model: #> Linear Regression Model Specification (regression) #>  #> Main Arguments: #>   penalty = 0.1 #>  #> Computational engine: glmnet nested_tr <- tidyr::nest(data_tr, data = -id) model_fit <- fit(nested_model, z ~ x + y + a + b, nested_tr) model_fit #> Nested model fit, with 20 inner models #> # A tibble: 20 × 2 #>       id .model_fit #>    <int> <list>     #>  1     1 <fit[+]>   #>  2     2 <fit[+]>   #>  3     3 <fit[+]>   #>  4     4 <fit[+]>   #>  5     5 <fit[+]>   #>  6     6 <fit[+]>   #>  7     7 <fit[+]>   #>  8     8 <fit[+]>   #>  9     9 <fit[+]>   #> 10    10 <fit[+]>   #> 11    11 <fit[+]>   #> 12    12 <fit[+]>   #> 13    13 <fit[+]>   #> 14    14 <fit[+]>   #> 15    15 <fit[+]>   #> 16    16 <fit[+]>   #> 17    17 <fit[+]>   #> 18    18 <fit[+]>   #> 19    19 <fit[+]>   #> 20    20 <fit[+]> predict(model_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  9.05 #>  2 52.0  #>  3 37.5  #>  4 51.6  #>  5 36.0  #>  6 47.7  #>  7 57.8  #>  8 57.1  #>  9 19.6  #> 10 33.3  #> # … with 250 more rows recipe <- recipe(data_tr, z ~ x + y + a + b + id) %>%   step_nest(id) recipe %>%   prep() %>%   bake(NULL) #> # A tibble: 740 × 6 #>        x      y     a     b      z nest_id #>    <int>  <dbl> <dbl> <dbl>  <dbl> <fct>   #>  1    49  239.   44.7 50.0   36.0  Nest 1  #>  2    97   63.4  79.9 74.1    4.20 Nest 1  #>  3    64  474.   80.6 49.1   36.7  Nest 1  #>  4    72  309.   59.7 26.0   47.2  Nest 1  #>  5    89 -416.   10.0 67.0  -13.3  Nest 1  #>  6    82  100.   25.6 62.0   57.2  Nest 1  #>  7    59 -109.   66.7 54.5   23.4  Nest 1  #>  8    78   44.4  87.1 61.1   55.2  Nest 1  #>  9    73 -436.   31.3  5.80  20.2  Nest 1  #> 10    71  -78.5  65.2 25.9   33.2  Nest 1  #> # … with 730 more rows wf <- workflow() %>%   add_model(nested_model) %>%   add_recipe(recipe) wf_fit <- fit(wf, data_tr) predict(wf_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  9.05 #>  2 52.0  #>  3 37.5  #>  4 51.6  #>  5 36.0  #>  6 47.7  #>  7 57.8  #>  8 57.1  #>  9 19.6  #> 10 33.3  #> # … with 250 more rows augment(wf_fit, data_tst) #> # A tibble: 260 × 8 #>       id   id2     x      y     z     a      b .pred #>    <int> <int> <int>  <dbl> <dbl> <dbl>  <dbl> <dbl> #>  1     1     1    55 -486.   9.72 91.7  40.7    9.05 #>  2     1     1    57  416.  42.5  50.3  33.8   52.0  #>  3     1     1    66  158.  25.3  30.4  60.6   37.5  #>  4     1     1    67  490.  37.3  40.2  92.1   51.6  #>  5     1     1    68  139.  24.6   2.76 55.4   36.0  #>  6     1     2    74  275.  46.0  98.7  57.2   47.7  #>  7     1     2    83  385.  67.6  75.7   4.30  57.8  #>  8     1     2    86  366.  66.9  63.8  -0.387 57.1  #>  9     1     2    90 -318.  -9.68 84.2  65.3   19.6  #> 10     1     2    92   23.4  2.71 77.3  99.6   33.3  #> # … with 250 more rows tidy(wf_fit) #> # A tibble: 100 × 4 #>    nest_id term        estimate penalty #>    <fct>   <chr>          <dbl>   <dbl> #>  1 Nest 1  (Intercept)  24.5        0.1 #>  2 Nest 1  x             0.138      0.1 #>  3 Nest 1  y             0.0488     0.1 #>  4 Nest 1  a             0.0455     0.1 #>  5 Nest 1  b            -0.0855     0.1 #>  6 Nest 2  (Intercept) -75.2        0.1 #>  7 Nest 2  x             0.610      0.1 #>  8 Nest 2  y             0.0349     0.1 #>  9 Nest 2  a            -0.0821     0.1 #> 10 Nest 2  b             0.0215     0.1 #> # … with 90 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"nestedmodels","text":"short vignette, simple example nested model workflow created used dummy data, demonstrate nestedmodels used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ashby Thorpe. Author, maintainer.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorpe (2022). nestedmodels: Tidymodels Nested/Panel Data. https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/.","code":"@Manual{,   title = {nestedmodels: Tidymodels for Nested/Panel Data},   author = {Ashby Thorpe},   year = {2022},   note = {https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/}, }"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"nestedmodels","dir":"","previous_headings":"","what":"Tidymodels for Nested/Panel Data","title":"Tidymodels for Nested/Panel Data","text":"goal nestedmodels allow modelling nested data. models accept certain predictors. panel data, often desirable create model panel. nestedmodels enhances ‘tidymodels’ set packages allowing user classify model ‘nested’.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidymodels for Nested/Panel Data","text":"can install development version nestedmodels like :","code":"# install.packages(\"devtools\") devtools::install_github(\"ashbythorpe/nestedmodels\")"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tidymodels for Nested/Panel Data","text":"basic example shows solve common problem:","code":"library(nestedmodels)  data(\"example_nested_data\")  nested_data <- tidyr::nest(example_nested_data, data = -id)  split <- nested_resamples(nested_data, rsample::initial_split())  data_tr <- rsample::training(split) data_tst <- rsample::testing(split)  model <- parsnip::linear_reg() %>%   nested()  fit <- fit(model, z ~ x + y + a + b,             tidyr::nest(data_tr, data = -id))  predict(fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  20.3 #>  2  49.2 #>  3  37.1 #>  4  27.6 #>  5  42.5 #>  6  43.3 #>  7  40.8 #>  8  29.7 #>  9  22.9 #> 10  45.2 #> # … with 250 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with predictions — augment.nested_model_fit","title":"Augment data with predictions — augment.nested_model_fit","text":"generics::augment() method nested models. augment() add column(s) predictions given data.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"# S3 method for nested_model_fit augment(x, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with predictions — augment.nested_model_fit","text":"x nested_model_fit object produced fit.nested_model_spec(). new_data data frame - can nested non-nested. ... Passed onto parsnip::augment.model_fit().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with predictions — augment.nested_model_fit","text":"data frame one added columns predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -c(id, id2))  fitted <- fit(model, nested_data) #> Error in check_df(data, \"data\"): argument \"data\" is missing, with no default  augment(fitted, example_nested_data) #> Error in augment(fitted, example_nested_data): could not find function \"augment\""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example nested data — example_nested_data","title":"Example nested data — example_nested_data","text":"dataset containing example data can nested. Mainly used examples testing.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example nested data — example_nested_data","text":"","code":"example_nested_data"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example nested data — example_nested_data","text":"tibble 1000 rows 7 variables id column can nested, ranging 1 20. id2 Another column can nested, ranging 1 30. x numeric column depends 'id'. y sequential numeric column (added randomness), independent columns. z column dependent id, id2, x y. randomly generated numeric column, ranging 1 100. b randomly generated numeric column, centred around 50.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example nested data — example_nested_data","text":"","code":"example_nested_data #> # A tibble: 1,000 × 7 #>       id   id2     x     y     z     a     b #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  239. 36.0   44.7 50.0  #>  2     1     1    50  313. 38.7   40.2 64.9  #>  3     1     1    51 -109. 23.4   43.2 38.0  #>  4     1     1    52  189. 34.2   66.4 61.7  #>  5     1     1    53 -491.  9.51  18.2 -1.66 #>  6     1     1    54  339. 39.7   83.8 38.8  #>  7     1     1    55 -486.  9.72  91.7 40.7  #>  8     1     1    56 -284. 17.0   79.8 55.4  #>  9     1     1    57  416. 42.5   50.3 33.8  #> 10     1     1    58  122. 31.8   25.4 20.5  #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the inner model of a nested model object — extract_inner_model","title":"Get the inner model of a nested model object — extract_inner_model","text":"Extract inner model nested_model object, workflow containing nested model.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the inner model of a nested model object — extract_inner_model","text":"","code":"extract_inner_model(x, ...)  # S3 method for default extract_inner_model(x, ...)  # S3 method for nested_model extract_inner_model(x, ...)  # S3 method for workflow extract_inner_model(x, ...)  # S3 method for model_spec extract_inner_model(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the inner model of a nested model object — extract_inner_model","text":"x model spec workflow","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the inner model of a nested model object — extract_inner_model","text":"model_spec object","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the inner model of a nested model object — extract_inner_model","text":"","code":"model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  extract_inner_model(model) #> Error in extract_inner_model(model): could not find function \"extract_inner_model\""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nested model to a dataset — fit.nested_model","title":"Fit a nested model to a dataset — fit.nested_model","text":"generics::fit() method nested models.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nested model to a dataset — fit.nested_model","text":"","code":"# S3 method for nested_model fit(   object,   formula,   data,   case_weights = NULL,   control = parsnip::control_parsnip(),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nested model to a dataset — fit.nested_model","text":"object object class nested_model. formula object class formula. Passed parsnip::fit.model_spec(). contain variable nest . data data frame. used 'nested_model' object, data frame must already nested. case_weights optional vector case weights. Passed parsnip::fit.model_spec(). control parsnip::control_parsnip() object. Passed parsnip::fit.model_spec(). ... Passed parsnip::fit.model_spec(). Currently unused.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a nested model to a dataset — fit.nested_model","text":"nested_model_fit object several elements: spec: model specification object (inner model nested model object) fit: tibble containing model fits nests correspond . inner_names: character vector names, used help nesting data predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a nested model to a dataset — fit.nested_model","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -id)  fit(model, z ~ x + y + a + b, nested_data) #> Nested model fit, with 20 inner models #> # A tibble: 20 × 2 #>       id .model_fit #>    <int> <list>     #>  1     1 <fit[+]>   #>  2     2 <fit[+]>   #>  3     3 <fit[+]>   #>  4     4 <fit[+]>   #>  5     5 <fit[+]>   #>  6     6 <fit[+]>   #>  7     7 <fit[+]>   #>  8     8 <fit[+]>   #>  9     9 <fit[+]>   #> 10    10 <fit[+]>   #> 11    11 <fit[+]>   #> 12    12 <fit[+]>   #> 13    13 <fit[+]>   #> 14    14 <fit[+]>   #> 15    15 <fit[+]>   #> 16    16 <fit[+]>   #> 17    17 <fit[+]>   #> 18    18 <fit[+]>   #> 19    19 <fit[+]>   #> 20    20 <fit[+]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"generics::fit_xy() method nested models. called directly instead called workflows::fit.workflow().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"","code":"# S3 method for nested_model fit_xy(   object,   x,   y,   case_weights = NULL,   control = parsnip::control_parsnip(),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"object object class nested_model. x data frame predictors. y data frame outcome data. case_weights optional vector case weights. Passed parsnip::fit.model_spec(). control parsnip::control_parsnip() object. Passed parsnip::fit.model_spec(). ... Passed parsnip::fit.model_spec(). Currently unused.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"nested_model_fit object several elements: spec: model specification object (inner model nested model object) fit: tibble containing model fits nests correspond . inner_names: character vector names, used help nesting data predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  recipe <- recipes::recipe(example_nested_data, z ~ x + y + id) %>%   step_nest(id)  wf <- workflows::workflow() %>%   workflows::add_recipe(recipe) %>%   workflows::add_model(model)  fit(wf, example_nested_data) #> ══ Workflow [trained] ══════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: nested_model() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 1 Recipe Step #>  #> • step_nest() #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> # A tibble: 20 × 2 #>    nest_id .model_fit #>    <fct>   <list>     #>  1 Nest 1  <fit[+]>   #>  2 Nest 2  <fit[+]>   #>  3 Nest 3  <fit[+]>   #>  4 Nest 4  <fit[+]>   #>  5 Nest 5  <fit[+]>   #>  6 Nest 6  <fit[+]>   #>  7 Nest 7  <fit[+]>   #>  8 Nest 8  <fit[+]>   #>  9 Nest 9  <fit[+]>   #> 10 Nest 10 <fit[+]>   #> 11 Nest 11 <fit[+]>   #> 12 Nest 12 <fit[+]>   #> 13 Nest 13 <fit[+]>   #> 14 Nest 14 <fit[+]>   #> 15 Nest 15 <fit[+]>   #> 16 Nest 16 <fit[+]>   #> 17 Nest 17 <fit[+]>   #> 18 Nest 18 <fit[+]>   #> 19 Nest 19 <fit[+]>   #> 20 Nest 20 <fit[+]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"parsnip::multi_predict() methods nested models. Allows predictions made sub-models model object.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"","code":"# S3 method for nested_model_fit multi_predict(object, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"object nested_model_fit object produced fit.nested_model_spec(). new_data data frame - can nested non-nested. ... Passed onto parsnip::multi_predict()","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"tibble number rows new_data, unnested.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg(penalty = 1) %>%   parsnip::set_engine(\"glmnet\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -id2)  fitted <- fit(model, nested_data) #> Error in check_df(data, \"data\"): argument \"data\" is missing, with no default  multi_predict(fitted, example_nested_data, penalty = c(0.1, 0.2, 0.3)) #> Error in multi_predict(fitted, example_nested_data, penalty = c(0.1, 0.2,     0.3)): could not find function \"multi_predict\""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Nested Model — nested","title":"Create a Nested Model — nested","text":"nested turns model workflow nested model/workflow. is_nested checks model workflow nested.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Nested Model — nested","text":"","code":"nested(x, ...)  # S3 method for default nested(x, ...)  # S3 method for model_spec nested(x, ...)  # S3 method for nested_model nested(x, ...)  # S3 method for workflow nested(x, ...)  is_nested(x, ...)  # S3 method for default is_nested(x, ...)  # S3 method for model_spec is_nested(x, ...)  # S3 method for workflow is_nested(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Nested Model — nested","text":"x model specification workflow. ... currently used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Nested Model — nested","text":"nested model object, workflow containing nested model. is_nested, logical vector length 1.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Nested Model — nested","text":"","code":"model <-   parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  model #> Nested Model Specification #>  #> Inner model: #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>   is_nested(model) #> [1] TRUE  wf <- workflows::workflow() %>%   workflows::add_model(model)  is_nested(wf) #> [1] TRUE"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Create splits with nested data — nested_resamples","title":"Create splits with nested data — nested_resamples","text":"Use 'rsample' split function nested data, nests act strata. almost guarantees every split contain data every nest.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create splits with nested data — nested_resamples","text":"","code":"nested_resamples(   data,   resamples,   nesting_method = NULL,   size_action = c(\"truncate\", \"recycle\", \"recycle-random\", \"combine\", \"combine-random\",     \"combine-end\", \"error\"),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create splits with nested data — nested_resamples","text":"data data frame. resamples expression, function, formula string can evaluated produce rset rsplit object. nesting_method recipe, workflow NULL, used nest data data already nested (see Details). size_action different numbers splits produced nest, sizes matched (see Details)? ... Extra arguments pass resamples.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create splits with nested data — nested_resamples","text":"Either rsplit object rset object, depending resamples.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create splits with nested data — nested_resamples","text":"function breaks data frame smaller, nested data frames. Resampling performed within nests, results combined together end. ensures split contains data every nest. However, function perform pooling (unlike rsample::make_strata()), may run issues nest small.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"nesting-data","dir":"Reference","previous_headings":"","what":"Nesting Data","title":"Create splits with nested data — nested_resamples","text":"data can nested several ways: nesting_method NULL data grouped (using dplyr::group_by()), data nested (see tidyr::nest()) works). data grouped, assumed already nested, nested_resamples try find column contains nested data frames. nesting_method workflow recipe, recipe step created using  step_nest(), data nested using step recipe. convenient already created recipe workflow, saves line code.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"resample-evaluation","dir":"Reference","previous_headings":"","what":"Resample Evaluation","title":"Create splits with nested data — nested_resamples","text":"resamples argument can take many forms: function call, vfold_cv(v = 5). similar format rsample::nested_cv(). function, rsample::vfold_cv. purrr-style anonymous function, converted function using rlang::as_function(). string, evaluated using rlang::exec(). Every method evaluated data passed first argument function (name 'data').","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"size-matching","dir":"Reference","previous_headings":"","what":"Size Matching","title":"Create splits with nested data — nested_resamples","text":"set resamples created nest can combined, must contain number splits. resampling methods, issue. rsample::vfold_cv(), example, reliably creates number splits defined v argument. However, resampling methods, like rsample::rolling_origin(), depend size data argument, therefore may produce different numbers resamples presented differently sized nests. size_action argument defines many ways matching sizes rsets different numbers splits. methods either try reduce number splits set set length set lowest number splits; opposite, set number splits largest set. \"truncate\", default, means splits beyond required length removed. \"recycle\" means sets splits extended repeating elements required length reached, mimicking process vector recycling. advantage method created splits preserved. \"recycle-random\" similar process recycling, splits copied random spaces output, may important order resamples matters. process completely random, program makes sure every split copied roughly number times. \"combine\" gets rid excess splits combining previous ones. means training testing rows merged one split. Combining done systematically: set splits needs compacted set 5, first split combined sixth split, eleventh, sixteenth, etc. approach recommended, since clear benefit combined split . \"combine-random\" combines split random set splits, instead systematic process described previous method. , process actually random, split combined roughly number splits. \"combine-end\" combines every excess split last non-excess split. \"error\" throws error nest produce number splits.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create splits with nested data — nested_resamples","text":"","code":"nested_data <- example_nested_data %>%   tidyr::nest(data = -id)  grouped_data <- example_nested_data %>%   dplyr::group_by(id)  recipe <- recipes::recipe(example_nested_data, z ~ .) %>%   step_nest(-id)  wf <- workflows::workflow() %>%   workflows::add_recipe(recipe)  nested_resamples(nested_data, rsample::vfold_cv()) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits            id     #>    <list>            <chr>  #>  1 <split [900/100]> Fold01 #>  2 <split [900/100]> Fold02 #>  3 <split [900/100]> Fold03 #>  4 <split [900/100]> Fold04 #>  5 <split [900/100]> Fold05 #>  6 <split [900/100]> Fold06 #>  7 <split [900/100]> Fold07 #>  8 <split [900/100]> Fold08 #>  9 <split [900/100]> Fold09 #> 10 <split [900/100]> Fold10  nested_resamples(   dplyr::group_by(example_nested_data, id),   ~ rsample::initial_split(.) ) #> <Training/Testing/Total> #> <740/260/1000>  nested_resamples(example_nested_data, ~ {   rsample::validation_split(.) }, nesting_method = recipe ) #> Error in rsplit(data, x$analysis, x$assessment): At least one row should be selected for the analysis set.  nested_resamples(example_nested_data, rsample::bootstraps,   times = 25, nesting_method = workflow ) #> Error in nested_resamples(example_nested_data, rsample::bootstraps, times = 25,     nesting_method = workflow): object 'workflow' not found  # nested nested resamples  nested_resamples(nested_data, rsample::nested_cv(   rsample::vfold_cv(),   rsample::bootstraps() )) #> # Nested resampling: #> #  outer: 10-fold cross-validation #> #  inner: Bootstrap sampling #> # A tibble: 10 × 3 #>    splits            id     inner_resamples       #>    <list>            <chr>  <list>                #>  1 <split [900/100]> Fold01 <bootstraps [25 × 2]> #>  2 <split [900/100]> Fold02 <bootstraps [25 × 2]> #>  3 <split [900/100]> Fold03 <bootstraps [25 × 2]> #>  4 <split [900/100]> Fold04 <bootstraps [25 × 2]> #>  5 <split [900/100]> Fold05 <bootstraps [25 × 2]> #>  6 <split [900/100]> Fold06 <bootstraps [25 × 2]> #>  7 <split [900/100]> Fold07 <bootstraps [25 × 2]> #>  8 <split [900/100]> Fold08 <bootstraps [25 × 2]> #>  9 <split [900/100]> Fold09 <bootstraps [25 × 2]> #> 10 <split [900/100]> Fold10 <bootstraps [25 × 2]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested Model Predictions — predict.nested_model_fit","title":"Nested Model Predictions — predict.nested_model_fit","text":"Apply fitted nested models generate different types predictions. stats::predict() methods nested model fits.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested Model Predictions — predict.nested_model_fit","text":"","code":"# S3 method for nested_model_fit predict(object, new_data, type = NULL, opts = list(), ...)  # S3 method for nested_model_fit predict_raw(object, new_data, opts = list(), ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested Model Predictions — predict.nested_model_fit","text":"object nested_model_fit object produced fit.nested_model_spec(). new_data data frame make predictions . Can nested non-nested. type singular character vector NULL. Passed parsnip::predict.model_fit(). opts list optional arguments. Passed parsnip::predict.model_fit(). ... Arguments underlying model's predict function. Passed parsnip::predict.model_fit().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested Model Predictions — predict.nested_model_fit","text":"data frame model predictions. predict_raw(), matrix, data frame, vector list.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested Model Predictions — predict.nested_model_fit","text":"","code":"data(\"example_nested_data\")  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -id)  fitted <- fit(model, z ~ x + y + a + b, nested_data)  predict(fitted, example_nested_data) #> # A tibble: 1,000 × 1 #>    .pred #>    <dbl> #>  1 42.0  #>  2 42.8  #>  3 26.4  #>  4 38.6  #>  5 12.4  #>  6 51.0  #>  7  9.84 #>  8 16.6  #>  9 53.4  #> 10 39.3  #> # … with 990 more rows  predict_raw(fitted, example_nested_data) #> Error in predict_raw(fitted, example_nested_data): could not find function \"predict_raw\""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics fit, fit_xy","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest transformation — step_nest","title":"Nest transformation — step_nest","text":"step_nest creates specification recipe step convert specified data single model term, specifying 'nest' row dataset corresponds .","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest transformation — step_nest","text":"","code":"step_nest(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   names = NULL,   lookup_table = NULL,   skip = FALSE,   id = recipes::rand_id(\"nest\") )  # S3 method for step_nest prep(x, training, info = NULL)  # S3 method for step_nest bake(object, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest transformation — step_nest","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables. step_nest, indicates variables nested. See recipes::selections() details. role used step since new variables assigned custom role. trained logical indicate quantities preprocessing estimated. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nest transformation — step_nest","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nest transformation — step_nest","text":"step_nest() create single nominal variable (named 'nest_id') set variables (type). Every unique combination specified columns recieve single nest id. recipe step designed use nested models, since model fitted data corresponding nest id. Using recipe often easier reliable nesting data manually. nest id corresponding unique combination column values decided recipe prepped (recipe contained workflow, happens workflow fitted). means using prepped recipe new data (using recipes::prep() workflows::predict.workflow()), unique combinations nesting columns must also exist training data. warned case. using 'rsample' package create splits presents issue, may want consider using nested_resamples(). step_nest() designed nesting transformed data 'nest_id' column equivalent following action non-transformed data:","code":"data %>%   dplyr::group_by(...) %>% # ... represents your specified terms   tidyr::nest()"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest transformation — step_nest","text":"","code":"data(\"example_nested_data\")  recipe <- recipes::recipe(example_nested_data, z ~ x + id) %>%   step_nest(-id) # equivalent to tidyr::nest(example_nested_data, data = -id)  data <- recipe %>%   recipes::prep() %>%   recipes::bake(NULL)  recipe2 <- recipes::recipe(example_nested_data, z ~ x + id) %>%   step_nest(x, z) # equivalent to tidyr::nest(example_nested_data, data = c(x,z))  data2 <- recipe %>%   recipes::prep() %>%   recipes::bake(NULL)  identical(data1, data2) # TRUE #> Error in identical(data1, data2): object 'data1' not found"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"Use broom functions fitted nested models. tidy.nested_model_fit summarises components model within nested model fit, indicating nested data frame row corresponds . glance.nested_model_fit summarises nested model, returning tibble::tibble() 1 row. glance_nested summarises model within nested model fit, returning tibble::tibble() number rows number inner models.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"","code":"# S3 method for nested_model_fit tidy(x, ...)  # S3 method for nested_model_fit glance(x, ...)  glance_nested(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"x object converted tidy tibble::tibble(). ... Additional arguments passed respective functions. (e.g. tidy.nested_model_fit, parsnip::tidy.model_fit()).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"tibble::tibble(). glance.nested_model_fit(), tibble 1 row.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"generics::glance() states glance methods always return 1 row outputs non-empty inputs. 'nestedmodels' package exception: glance methods combine rows produce result single row. Specifically: column contains 1 unique value, value used. column numeric, mean calculated. Otherwise, results combined list.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"","code":"model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()    fit <- fit(model, z ~ ., tidyr::group_by(example_nested_data, .data$id)) #> Error: 'group_by' is not an exported object from 'namespace:tidyr'  tidy(fit) #> Error in tidy(fit): could not find function \"tidy\" glance(fit) #> Error in glance(fit): could not find function \"glance\" glance_nested(fit) #> Error in glance_nested(fit): `x` must have class: <nested_model_fit>. #> ℹ Actual class: <function>."},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"}]
