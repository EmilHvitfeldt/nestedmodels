% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/listify_nest_id.R
\name{listify_nest_id}
\alias{listify_nest_id}
\title{Turn tidy tibbles into a list of results}
\usage{
listify_nest_id(df)
}
\arguments{
\item{df}{A data frame with a column named 'nest_id'}
}
\value{
A list of data frames, each with the same class and attributes as
the original object.
}
\description{
Turn any data frame with a 'nest_id' column into a list of tibbles. Many
'nestedmodels' functions return their results in a tibble, with the
'nest_id' column referring to the nested data frame that the rest of the
data corresponds to.
This function is included for convenience: a list of results is sometimes
easier to work with than a single data frame.
}
\details{
The \code{\link[=last_fit]{last_fit()}} and \code{\link[=nested_resamples]{nested_resamples()}} functions reliably return a result
that can be turned into a list. However, other functions such as the
\code{\link[=tune_nested]{tune_nested()}} and \code{\link[=fit_resamples]{fit_resamples()}} functions have the potential to return
such an object (see their documentation for more details).

The reason why a list of data frames is nice to have, is that these data
frames can be acted upon individually, using functionals (e.g. the 'purrr'
package). This function also tries to preserve attributes, which usually
helps when working with these data frames.
}
\examples{
data("example_nested_tune_results")
x <- listify_nest_id(example_nested_tune_results)

# You can now use functionals to run tune functions on the tune results.
purrr::map(x, tune::collect_metrics)

}
