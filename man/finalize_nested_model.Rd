% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/finalize.R
\name{finalize_nested_model}
\alias{finalize_nested_model}
\alias{finalize_nested_model.default}
\alias{finalize_nested_model.nested_model}
\alias{finalize_nested_model.nested_models}
\alias{finalize_nested_recipe}
\alias{finalize_nested_recipe.default}
\alias{finalize_nested_recipe.recipe}
\alias{finalize_nested_recipe.nested_recipes}
\alias{finalize_nested_workflow}
\alias{finalize_nested_workflow.default}
\alias{finalize_nested_workflow.nested_workflow}
\alias{finalize_nested_workflow.nested_workflows}
\title{Finalize nested models, workflows or recipes}
\usage{
finalize_nested_model(x, ...)

\method{finalize_nested_model}{default}(x, parameters)

\method{finalize_nested_model}{nested_model}(x, parameters)

\method{finalize_nested_model}{nested_models}(x, parameters)

finalize_nested_recipe(x, ...)

\method{finalize_nested_recipe}{default}(x, parameters)

\method{finalize_nested_recipe}{recipe}(x, parameters)

\method{finalize_nested_recipe}{nested_recipes}(x, parameters)

finalize_nested_workflow(x, ...)

\method{finalize_nested_workflow}{default}(x, parameters)

\method{finalize_nested_workflow}{nested_workflow}(x, parameters)

\method{finalize_nested_workflow}{nested_workflows}(x, parameters)
}
\arguments{
\item{x}{A model, recipe or workflow.}

\item{parameters}{A tibble of parameter values with the same number of rows
as the number of nested data frames. See \code{\link[=show_best.nested_tune_results]{show_best.nested_tune_results()}}.
Alternatively, a list of parameter values.}
}
\value{
An updated version of x with class 'nested_models'.
}
\description{
\verb{finalize_nested_*} allows you to update a model, recipe or workflow using
a tibble of tuning parameter values, created using
\code{\link[=select_best.nested_tune_results]{select_best.nested_tune_results()}} and similar functions. It provides
functionality for results selected using \code{group_nests = TRUE}.
}
\details{
If the parameter set has been produced using \code{group_nests = TRUE}, then \code{x}
should contain a set of parameters for each nested data frame. This function
will create a set of workflows, where each workflow uses the parameters
selected from the tune results on each tuned data frame. This means that
each object will perform better on its nested data frame, which may produce
better results. However, multiple models will take more space to store, and
will require more resamples and tuning iterations to produce good results
for each nested data frame.

If \code{x} is a nested model and \code{parameters} has 1 row or is a list, the
arguments will be passed down to the corresponding tune functions.

If \code{x} is a 'nested_*s' (e.g. 'nested_models') object and 1 set of parameters
is passed, every object will be finalized with this set of parameters.

If \code{x} is a 'nested_*s' object, and \code{parameters} has more than 1 row,
each object will be finalized with its corresponding parameters (since each
object should correspond to a nested data frame, and each set of parameters
should also correspond to a nested data frame.)
}
\examples{
data("example_nested_tune_results")
data("example_nested_data")

model <- model <- parsnip::svm_rbf(mode = "regression", cost = tune()) \%>\%
  parsnip::set_engine("kernlab") \%>\%
  nested()

recipe <- recipes::recipe(example_nested_data, z ~ x + y + id) \%>\%
  recipes::step_pca(x, y, num_comp = tune::tune()) \%>\%
  step_nest(id)

workflow <- workflows::workflow() \%>\%
  workflows::add_recipe(recipe) \%>\%
  add_nested_model(model)

best <- select_best(example_nested_tune_results, "rmse")
nested_best <- select_best(example_nested_tune_results, "rmse", 
                           group_nests = TRUE)

# These two return identical results.
tune::finalize_model(model, best)
finalize_nested_model(model, best)

finalize_nested_model(model, nested_best)
finalize_nested_recipe(recipe, best)
finalize_nested_workflow(workflow, nested_best)

}
