% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflowsets.R
\name{nested_workflow_map}
\alias{nested_workflow_map}
\title{Process a series of nested workflows}
\usage{
nested_workflow_map(
  object,
  fn = "tune_grid",
  verbose = FALSE,
  seed = sample.int(10^4, 1),
  resamples = NULL,
  ...
)
}
\arguments{
\item{object}{A workflow set, created using \code{\link[workflowsets:workflow_set]{workflowsets::workflow_set()}} or
\code{\link[workflowsets:as_workflow_set]{workflowsets::as_workflow_set()}}.}

\item{fn}{A function, function name, or purrr style anonymous function to
tune models (see \code{\link[rlang:as_function]{rlang::as_function()}}). If a model is nested, this is
passed to \code{\link[=tune_nested]{tune_nested()}}.}

\item{verbose}{A logical for logging progress.}

\item{seed}{A single integer that is set prior to each function execution.}

\item{resamples}{A resample object created by \code{\link[=nested_resamples]{nested_resamples()}} or
an 'rsample' function. Alternatively, a length 2 list, containing a
nested resamples object and a non-nested resamples object.}

\item{...}{Options to pass to the modelling function. See details below.}
}
\value{
An updated workflow set.
}
\description{
This function allows you to tune a set of both nested and non-nested
workflows.
}
\details{
When passing options, anything passed in the ... will be combined with any
values in the option column. The values in ... will override that column's
values and the new options are added to the options column.
}
\section{Adding resamples}{

If \code{resamples} is a single resample object, every workflow will be tuned
using this object. If \code{resamples} is a list, the object with class
'nested_resamples' will be used to tune nested workflows, while the other
object will be used to tune non-nested workflows. You can name the list to
make explicit how each object will be used, using the format:
\code{list(nested = nested_resamples, normal = non_nested_resamples)}
You can also specify a list of length 1, e.g:
\code{list(nested = nested_resamples)}
This example will only set the resamples for nested workflows, leaving
non-nested workflows as is.
This is useful when you have already specified certain resamples using
\code{\link[workflowsets:option_add]{workflowsets::option_add()}}
}

\examples{
model <- parsnip::linear_reg(penalty = tune()) \%>\%
  parsnip::set_engine("glmnet") \%>\%
  nested()

recipe <- recipes::recipe(example_nested_data, z ~ x + y + id) \%>\%
  recipes::step_pca(x, y, num_comp = tune::tune()) \%>\%
  step_nest(-id)

wf <- workflows::workflow() \%>\%
  workflows::add_recipe(recipe) \%>\%
  add_nested_model(model)

resamples <- nested_resamples(example_nested_data, rsample::vfold_cv, 
                              recipe, 2)

normal_model <- parsnip::linear_reg(penalty = tune()) \%>\%
  parsnip::set_engine("glmnet")

normal_workflow <- 
  workflows::workflow() \%>\%
  workflows::add_model(normal_model) \%>\%
  workflows::add_formula(z ~ x + y + id)

normal_resamples <- rsample::vfold_cv(example_nested_data, 2)

wfset <- 
  workflowsets::as_workflow_set(
    nested = wf, 
    normal = normal_workflow
  )

tuned_wfset <-
  nested_workflow_map(wfset, tune::tune_grid, resamples = list(
    nested = resamples, normal = normal_resamples
  ))

tuned_wfset \%>\%
  workflowsets::collect_metrics()

tuned_wfset \%>\%
  workflowsets::rank_results(select_best = F)
  
tuned_wfset \%>\%
  workflowsets::rank_results(select_best = T)

}
\seealso{
\code{\link[workflowsets:workflow_map]{workflowsets::workflow_map()}}
}
