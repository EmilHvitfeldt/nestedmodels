% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/control.R
\name{control_nested}
\alias{control_nested}
\title{Control object for nested functions.}
\usage{
control_nested(verbose = F, allow_par = T, control = NULL)
}
\arguments{
\item{verbose}{A logical for logging results. When T, the function will
print the name of each nested data frame when it is reached.}

\item{allow_par}{A logical to allow parallel processing (if a parallel
backend is registered) over each nested data frame.}

\item{control}{The control object for the function that \code{control_nested()}
is passed into, or NULL. If NULL, the default object is used (e.g. if
\code{control_nested()} is used within \code{\link[=fit.nested_model]{fit.nested_model()}},
\code{\link[parsnip:control_parsnip]{parsnip::control_parsnip()}} with no arguments will be used.)}
}
\value{
An object with class 'control_nested'
}
\description{
Control aspects of the nested fitting, predicting or tuning process.
}
\details{
\code{control_nested()} is designed to work with all nested functions defined by
'nestedmodels' that require a control object. However, these functions will
also allow the user to supply a specific control object
(e.g. \code{\link[tune:control_grid]{tune::control_grid()}} for tune_nest(.f = "control_grid")).
The only situation where you will need to supply a custom \code{control_nested()}
object is when you want to control verbosity and parallel processing over
\emph{specifically} the nests that you have specified. For example, if you define
a control object: \code{control_nested(allow_par = TRUE)}, parallel processing
will occur only over each nested data frame. If you supply a non
\code{control_nested()} object, the function will try to find the 'verbose' and
'allow_par' options from these objects, falling back to defaults if none are
found (e.g. \code{\link[tune:control_bayes]{tune::control_bayes()}} does not have an 'allow_par' option).
}
\examples{
control_nested()

# Parallel over resamples but not nested data frames.
control_nested(allow_par = F, control = tune::control_grid(allow_par = T))
# Parallel over nested data frames but not resamples.
control_nested(allow_par = T, control = tune::control_grid(allow_par = F))
# Parallel over everything
control_nested(allow_par = T, control = tune::control_grid(allow_par = T))
tune::control_grid(allow_par = T)
# Parallel over nothing
control_nested(allow_par = F, control = tune::control_grid(allow_par = F))
tune::control_grid(allow_par = F)

}
