% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit.R
\name{fit.nested_model}
\alias{fit.nested_model}
\title{Fit a nested model or workflow to a dataset}
\usage{
\method{fit}{nested_model}(
  object,
  formula,
  data,
  case_weights = NULL,
  control = parsnip::control_parsnip(),
  ...
)
}
\arguments{
\item{object}{An object of class 'nested_model', 'nested_workflow',
'nested_models' or 'nested_workflows'.}

\item{formula}{An object of class formula. Passed into
\code{\link[parsnip:fit]{parsnip::fit.model_spec()}}.}

\item{data}{A data frame. If used with a 'nested_model' object, the data
frame must already be nested.}

\item{control}{A \code{\link[parsnip:control_parsnip]{parsnip::control_parsnip()}},
\code{\link[workflows:control_workflow]{workflows::control_workflow()}} or \code{\link[=control_nested]{control_nested()}} object.}

\item{...}{Passed into the respective fit functions. Currently unused.}
}
\value{
A 'nested_model_fit' or 'nested_workflow_fit' object.
}
\description{
\code{\link[generics:fit]{generics::fit()}} methods for nested models and workflows.
Do not use \code{fit_xy} for nested models or workflows.
}
\examples{
data("example_nested_data")

model <- parsnip::linear_reg() \%>\%
  parsnip::set_engine("lm") \%>\%
  nested()

recipe <- recipes::recipe(example_nested_data, z ~ x + y + id) \%>\%
  step_nest(id)

wf <- workflow() \%>\%
  add_recipe(recipe) \%>\%
  add_model(model)

fit(wf, example_nested_data)

}
\seealso{
\link[parsnip:fit]{parsnip::fit.model_spec} \link[workflows:fit-workflow]{workflows::fit.workflow}
}
